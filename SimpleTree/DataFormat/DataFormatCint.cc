//
// File generated by rootcint at Thu Nov 21 16:26:02 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DataFormatCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataFormatCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::data_base data_base;
      #else
      class data_base  :  public ::FrameworkBase {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~data_base() throw() {};
         ::DATA::DATA_TYPE _type; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::event event;
      #else
      class event  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~event() throw() {};
         unsigned int _eventID; ///< Event counter 
         unsigned int _runID; ///< Run number
         unsigned int _subrunID; ///< Sub-Run number
         double _triggerT; ///< Trigger time in second
         double _beamT; ///< Beam time in second
         double _pot; ///< Protons on target
         double _etau; ///< Electron drift lifetime
         bool _isdata; ///< Flag: MC=0, DATA=1
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::hit hit;
      #else
      class hit  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~hit() throw() {};
         unsigned short _num_hits; ///< Number of hits
         unsigned char _plane[20000]; ///< Wire plane ID
         unsigned short _channel[20000]; ///< Channel number
         unsigned short _wire[20000]; ///< Wire ID number
         double _startT[20000]; ///< Hit start time
         double _peakT[20000]; ///< Hit peak time
         double _endT[20000]; ///< Hit end time
         double _charge[20000]; ///< Hit charge
         double _startT_sigma[20000]; ///< Hit start time
         double _peakT_sigma[20000]; ///< Hit peak time
         double _endT_sigma[20000]; ///< Hit end time
         double _charge_sigma[20000]; ///< Hit charge
         double _gof[20000]; ///< Goodness of hit
         unsigned short _trackID[20000]; ///< Associated track ID
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::cluster cluster;
      #else
      class cluster  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~cluster() throw() {};
         unsigned short _num_clusters; ///< Number of clusters
         unsigned short _clusterID[1000]; ///< Cluster ID 
         unsigned char _view[1000]; ///< View_t key in LArSoft
         double _charge[1000]; ///< Charge sum
         double _dtdw[1000]; ///< dt/dw ... d(time)/d(wire)
         double _dtdw_sigma[1000]; ///< dt/dw sigma
         double _dqdw[1000]; ///< dq/dw ... d(charge)/d(wire)
         double _dqdw_sigma[1000]; ///< dq/dw sigma
         float _startx[1000]; ///< Starting vtx X coordinate
         float _starty[1000]; ///< Starting vtx Y coordinate
         float _startz[1000]; ///< Starting vtx Z coordinate
         float _startx_sigma[1000]; ///< Starting vtx X coordinate sigma
         float _starty_sigma[1000]; ///< Starting vtx Y coordinate sigma
         float _startz_sigma[1000]; ///< Starting vtx Z coordinate sigma
         float _endx[1000]; ///< Ending vtx X coordinate
         float _endy[1000]; ///< Ending vtx Y coordinate
         float _endz[1000]; ///< Ending vtx Z coordinate
         float _endx_sigma[1000]; ///< Ending vtx X coordinate sigma
         float _endy_sigma[1000]; ///< Ending vtx Y coordinate sigma
         float _endz_sigma[1000]; ///< Ending vtx Z coordinate sigma
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::sps sps;
      #else
      class sps  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~sps() throw() {};
         unsigned short _num_sps; ///< Number of space-points (SPS)
         unsigned short _spsID[10000]; ///< SPS ID
         float _vtxx[10000]; ///< SPS x coordinates
         float _vtxy[10000]; ///< SPS y coordinates
         float _vtxz[10000]; ///< SPS z coordinates
         float _vtxx_sigma[10000]; ///< SPS x coordinate errors
         float _vtxy_sigma[10000]; ///< SPS y coordinate errors
         float _vtxz_sigma[10000]; ///< SPS z coordinate errors
         float _chi2[10000]; ///< SPS Chi2
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::track track;
      #else
      class track  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~track() throw() {};
         unsigned short _num_tracks; ///< Number of tracks
         unsigned short _trackID[300]; ///< Track ID
         float _startx[300]; ///< Start position X
         float _starty[300]; ///< Start position Y
         float _startz[300]; ///< Start position Z
         float _startd[300]; ///< Start distance to boundary
         float _endx[300]; ///< End position X
         float _endy[300]; ///< End position Y   
         float _endz[300]; ///< End position Z
         float _endd[300]; ///< End distance to boundary
         float _theta[300]; ///< Theta
         float _phi[300]; ///< Phi
         double _startmom[300]; ///< Total momentum
         double _len[300]; ///< Track length 
         unsigned short _num_points; ///< Number of trajectory points (for all tracks)
         unsigned short _vtxID[10000]; ///< Array of associated track ID
         float _vtxx[10000]; ///< X coordinate of trajectory point
         float _vtxy[10000]; ///< Y coordinate of trajectory point
         float _vtxz[10000]; ///< Z coordinate of trajectory point
         float _dirx[10000]; ///< X component direction of a trajectory point along a track
         float _diry[10000]; ///< Y component direction of a trajectory point along a track
         float _dirz[10000]; ///< Z component direction of a trajectory point along a track
         double _mom[10000]; ///< Momentum at a trajectory point
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mctruth mctruth;
      #else
      class mctruth  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~mctruth() throw() {};
         unsigned short _num_part; ///< Number of primary particles
         int _pdgid[20000]; ///< PDGID of a primary
         int _status_code[20000]; ///< Status code of a primary... WHAT IS STATUS CODE??
         unsigned short _gen_trackID[20000]; ///< Generation track ID of a primary ... (NOT G4 TRACK ID)
         unsigned char _origin[20000]; ///< Generation track ID of a primary ... (NOT G4 TRACK ID)
         int _num_daughter[20000]; ///< Number of daughters created by a primary
         int _mother[20000]; ///< The parent's track ID of a primary (if a parent exists)
         float _vtxx[20000]; ///< X coordinate position of a primary @ generation
         float _vtxy[20000]; ///< Y coordinate position of a primary @ generation
         float _vtxz[20000]; ///< Z coordinate position of a primary @ generation
         double _mass[20000]; ///< Mass of a primary
         double _E[20000]; ///< Energy of a primary
         double _mom[20000]; ///< Momentum of a primary
         double _momx[20000]; ///< X component momentum of a primary @ generation
         double _momy[20000]; ///< Y component momentum of a primary @ generation
         double _momz[20000]; ///< Z component momentum of a primary @ generation
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mcnu mcnu;
      #else
      class mcnu  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~mcnu() throw() {};
         unsigned char _num_nu; ///< Number of neutrinos
         int _pdgid[100]; ///< PDGID of a neutrino
         bool _ccnc[100]; ///< 0=CC, 1=NC
         unsigned char _mode[100]; ///< 0=QE/E1, 1=RES, 2=DIS, 3=Coherent interaction mode 
         double _q2[100]; ///< Squared momentum transfer
         double _hmass[100]; ///< Hadronic invariant mass
         int _hitnuc[100]; ///< PDGID of nucleus on which neutrino has interacted
         float _vtxx[100]; ///< X coordinate position of the interaction vtx
         float _vtxy[100]; ///< Y coordinate position of the interaction vtx
         float _vtxz[100]; ///< Z coordinate position of the interaction vtx
         double _E[100]; ///< Energy
         double _momx[100]; ///< X component of neutrino momentum
         double _momy[100]; ///< Y component of neutrino momentum
         double _momz[100]; ///< Z component of neutrino momentum
         double _E_lep[100]; ///< Energy of the outgoing lepton
         double _momx_lep[100]; ///< X component of outgoing lepton momentum
         double _momy_lep[100]; ///< Y component of outgoing lepton momentum
         double _momz_lep[100]; ///< Z component of outgoing lepton momentum
         double _momx_parent[100]; ///< X component of parent particle momentum @ leaving BNB target
         double _momy_parent[100]; ///< Y component of parent particle momentum @ leaving BNB target
         double _momz_parent[100]; ///< Z component of parent particle momentum @ leaving BNB target
         int _pdgid_parent[100]; ///< PDGID of a parent particle @ leaving BNB target
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mcpart mcpart;
      #else
      class mcpart  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~mcpart() throw() {};
         bool _part_info_set; ///< Checker variable set to true by mcpart::set_part_info and false by mcpart::add_particle
         bool _fv_part_info_set; ///< Checker variable set to true by mcpart::set_fv_part_info and false by mcpart::add_particle
         unsigned short _num_part; ///< Number of particles stored
         unsigned short _trackID[10000]; ///< Track ID ... unique per particle from G4
         int _pdgid[10000]; ///< PDGID of a particle
         int _status_code[10000]; ///< Status code of a particle (what is this?)
         double _momx[10000]; ///< X component of momentum @ particle 1st step
         double _momy[10000]; ///< Y component of momentum @ particle 1st step
         double _momz[10000]; ///< Z component of momentum @ particle 1st step
         float _startx[10000]; ///< X coordinate position @ particle 1st step
         float _starty[10000]; ///< Y coordinate position @ particle 1st step
         float _startz[10000]; ///< Z coordinate position @ particle 1st step
         double _startt[10000]; ///< Time (G4 definition) @ particle 1st step
         float _endx[10000]; ///< X coordinate position @ particle last step  
         float _endy[10000]; ///< Y coordinate position @ particle last step  
         float _endz[10000]; ///< Z coordinate position @ particle last step  
         float _endt[10000]; ///< Time (G4 definition) @ particle last step  
         double _mom[10000]; ///< Momentum (scalar magnitude) @ particle 1st step
         float _len[10000]; ///< Summed length of particle's trajectories
         double _fv_momx[10000]; ///< X component of momentum @ particle 1st step in the Fiducial Volume
         double _fv_momy[10000]; ///< Y component of momentum @ particle 1st step in the Fiducial Volume
         double _fv_momz[10000]; ///< Z component of momentum @ particle 1st step in the Fiducial Volume
         float _fv_startx[10000]; ///< X coordinate position @ particle 1st step in the Fiducial Volume
         float _fv_starty[10000]; ///< Y coordinate position @ particle 1st step in the Fiducial Volume
         float _fv_startz[10000]; ///< Z coordinate position @ particle 1st step in the Fiducial Volume
         double _fv_startt[10000]; ///< Time (G4 definition) @ particle 1st step in the Fiducial Volume
         float _fv_endx[10000]; ///< X coordinate position @ particle last step in the Fiducial Volume  
         float _fv_endy[10000]; ///< Y coordinate position @ particle last step in the Fiducial Volume  
         float _fv_endz[10000]; ///< Z coordinate position @ particle last step in the Fiducial Volume  
         float _fv_endt[10000]; ///< Time (G4 definition) @ particle last step in the Fiducial Volume  
         double _fv_mom[10000]; ///< Momentum (scalar magnitude) @ particle 1st step in the Fiducial Volume
         float _fv_len[10000]; ///< Summed length of particle's trajectories in the Fiducial Volume
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::pmtfifo pmtfifo;
      #else
      class pmtfifo  :  public ::data_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~pmtfifo() throw() {};
         unsigned short _num_pmtfifo; ///< Number of space-points (SPS)
         unsigned char _channel[2000]; ///< Channel number
         unsigned char _discID[2000]; ///< Discriminator ID
         unsigned int _frame[2000]; ///< Frame ID
         unsigned int _sample[2000]; ///< Sample ID
         unsigned int _index[2000]; ///< Start index of corresponding ADC sample C-array
         unsigned short _size[2000]; ///< Length of ADC sample C-array
         unsigned int _num_adc; ///< Number of ADC count
         unsigned short _adc[120000]; ///< ADC sample combined for all channel
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::storage_manager storage_manager;
      #else
      class storage_manager  :  public ::FrameworkBase {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::storage_manager::MODE MODE;
         #else
         enum MODE  {
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::storage_manager::STATUS STATUS;
         #else
         enum STATUS  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~storage_manager() throw() {};
         unsigned int _index; //
         unsigned int _nevents; //
         unsigned int _nevents_read; //
         unsigned int _nevents_written; //
         STATUS _status; //
         MODE _mode; //
         bool _read_data_array[30]; //
         bool _write_data_array[30]; //
         ::data_base* _ptr_data_array[30]; //
         string _out_fname; //
         vector< ::string > _in_fnames; //
         string _name_tdirectory; //
         ::TFile* _fout; //
         ::TChain* _in_ch; //
         ::TTree* _out_ch; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace DATA {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void DATA_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("DATA", 0 /*version*/, "./DataTypeConstants.hh", 16,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &DATA_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void DATA_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void data_base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void data_base_Dictionary();
   static void *new_data_base(void *p = 0);
   static void *newArray_data_base(Long_t size, void *p);
   static void delete_data_base(void *p);
   static void deleteArray_data_base(void *p);
   static void destruct_data_base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::data_base*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::data_base) == sizeof(::ROOT::Shadow::data_base));
      ::data_base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::data_base),0);
      static ::ROOT::TGenericClassInfo 
         instance("data_base", "./data_base.hh", 29,
                  typeid(::data_base), DefineBehavior(ptr, ptr),
                  &data_base_ShowMembers, &data_base_Dictionary, isa_proxy, 4,
                  sizeof(::data_base) );
      instance.SetNew(&new_data_base);
      instance.SetNewArray(&newArray_data_base);
      instance.SetDelete(&delete_data_base);
      instance.SetDeleteArray(&deleteArray_data_base);
      instance.SetDestructor(&destruct_data_base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::data_base*)
   {
      return GenerateInitInstanceLocal((::data_base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::data_base*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void data_base_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void event_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void event_Dictionary();
   static void *new_event(void *p = 0);
   static void *newArray_event(Long_t size, void *p);
   static void delete_event(void *p);
   static void deleteArray_event(void *p);
   static void destruct_event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::event*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::event) == sizeof(::ROOT::Shadow::event));
      ::event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::event),0);
      static ::ROOT::TGenericClassInfo 
         instance("event", "./event.hh", 21,
                  typeid(::event), DefineBehavior(ptr, ptr),
                  &event_ShowMembers, &event_Dictionary, isa_proxy, 4,
                  sizeof(::event) );
      instance.SetNew(&new_event);
      instance.SetNewArray(&newArray_event);
      instance.SetDelete(&delete_event);
      instance.SetDeleteArray(&deleteArray_event);
      instance.SetDestructor(&destruct_event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::event*)
   {
      return GenerateInitInstanceLocal((::event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::event*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void event_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::event*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void hit_Dictionary();
   static void *new_hit(void *p = 0);
   static void *newArray_hit(Long_t size, void *p);
   static void delete_hit(void *p);
   static void deleteArray_hit(void *p);
   static void destruct_hit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::hit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::hit) == sizeof(::ROOT::Shadow::hit));
      ::hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::hit),0);
      static ::ROOT::TGenericClassInfo 
         instance("hit", "./hit.hh", 20,
                  typeid(::hit), DefineBehavior(ptr, ptr),
                  &hit_ShowMembers, &hit_Dictionary, isa_proxy, 4,
                  sizeof(::hit) );
      instance.SetNew(&new_hit);
      instance.SetNewArray(&newArray_hit);
      instance.SetDelete(&delete_hit);
      instance.SetDeleteArray(&deleteArray_hit);
      instance.SetDestructor(&destruct_hit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::hit*)
   {
      return GenerateInitInstanceLocal((::hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void hit_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::hit*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void cluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void cluster_Dictionary();
   static void *new_cluster(void *p = 0);
   static void *newArray_cluster(Long_t size, void *p);
   static void delete_cluster(void *p);
   static void deleteArray_cluster(void *p);
   static void destruct_cluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::cluster*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::cluster) == sizeof(::ROOT::Shadow::cluster));
      ::cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::cluster),0);
      static ::ROOT::TGenericClassInfo 
         instance("cluster", "./cluster.hh", 21,
                  typeid(::cluster), DefineBehavior(ptr, ptr),
                  &cluster_ShowMembers, &cluster_Dictionary, isa_proxy, 4,
                  sizeof(::cluster) );
      instance.SetNew(&new_cluster);
      instance.SetNewArray(&newArray_cluster);
      instance.SetDelete(&delete_cluster);
      instance.SetDeleteArray(&deleteArray_cluster);
      instance.SetDestructor(&destruct_cluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::cluster*)
   {
      return GenerateInitInstanceLocal((::cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void cluster_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::cluster*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void sps_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void sps_Dictionary();
   static void *new_sps(void *p = 0);
   static void *newArray_sps(Long_t size, void *p);
   static void delete_sps(void *p);
   static void deleteArray_sps(void *p);
   static void destruct_sps(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sps*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::sps) == sizeof(::ROOT::Shadow::sps));
      ::sps *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::sps),0);
      static ::ROOT::TGenericClassInfo 
         instance("sps", "./spacepoint.hh", 23,
                  typeid(::sps), DefineBehavior(ptr, ptr),
                  &sps_ShowMembers, &sps_Dictionary, isa_proxy, 4,
                  sizeof(::sps) );
      instance.SetNew(&new_sps);
      instance.SetNewArray(&newArray_sps);
      instance.SetDelete(&delete_sps);
      instance.SetDeleteArray(&deleteArray_sps);
      instance.SetDestructor(&destruct_sps);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sps*)
   {
      return GenerateInitInstanceLocal((::sps*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sps*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void sps_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::sps*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void track_Dictionary();
   static void *new_track(void *p = 0);
   static void *newArray_track(Long_t size, void *p);
   static void delete_track(void *p);
   static void deleteArray_track(void *p);
   static void destruct_track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::track*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::track) == sizeof(::ROOT::Shadow::track));
      ::track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::track),0);
      static ::ROOT::TGenericClassInfo 
         instance("track", "./track.hh", 21,
                  typeid(::track), DefineBehavior(ptr, ptr),
                  &track_ShowMembers, &track_Dictionary, isa_proxy, 4,
                  sizeof(::track) );
      instance.SetNew(&new_track);
      instance.SetNewArray(&newArray_track);
      instance.SetDelete(&delete_track);
      instance.SetDeleteArray(&deleteArray_track);
      instance.SetDestructor(&destruct_track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::track*)
   {
      return GenerateInitInstanceLocal((::track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::track*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void track_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::track*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mctruth_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mctruth_Dictionary();
   static void *new_mctruth(void *p = 0);
   static void *newArray_mctruth(Long_t size, void *p);
   static void delete_mctruth(void *p);
   static void deleteArray_mctruth(void *p);
   static void destruct_mctruth(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mctruth*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mctruth) == sizeof(::ROOT::Shadow::mctruth));
      ::mctruth *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mctruth),0);
      static ::ROOT::TGenericClassInfo 
         instance("mctruth", "./mctruth.hh", 21,
                  typeid(::mctruth), DefineBehavior(ptr, ptr),
                  &mctruth_ShowMembers, &mctruth_Dictionary, isa_proxy, 4,
                  sizeof(::mctruth) );
      instance.SetNew(&new_mctruth);
      instance.SetNewArray(&newArray_mctruth);
      instance.SetDelete(&delete_mctruth);
      instance.SetDeleteArray(&deleteArray_mctruth);
      instance.SetDestructor(&destruct_mctruth);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mctruth*)
   {
      return GenerateInitInstanceLocal((::mctruth*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mctruth*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mctruth_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mctruth*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mcnu_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mcnu_Dictionary();
   static void *new_mcnu(void *p = 0);
   static void *newArray_mcnu(Long_t size, void *p);
   static void delete_mcnu(void *p);
   static void deleteArray_mcnu(void *p);
   static void destruct_mcnu(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mcnu*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mcnu) == sizeof(::ROOT::Shadow::mcnu));
      ::mcnu *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mcnu),0);
      static ::ROOT::TGenericClassInfo 
         instance("mcnu", "./mcnu.hh", 20,
                  typeid(::mcnu), DefineBehavior(ptr, ptr),
                  &mcnu_ShowMembers, &mcnu_Dictionary, isa_proxy, 4,
                  sizeof(::mcnu) );
      instance.SetNew(&new_mcnu);
      instance.SetNewArray(&newArray_mcnu);
      instance.SetDelete(&delete_mcnu);
      instance.SetDeleteArray(&deleteArray_mcnu);
      instance.SetDestructor(&destruct_mcnu);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mcnu*)
   {
      return GenerateInitInstanceLocal((::mcnu*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mcnu*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mcnu_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mcnu*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mcpart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mcpart_Dictionary();
   static void *new_mcpart(void *p = 0);
   static void *newArray_mcpart(Long_t size, void *p);
   static void delete_mcpart(void *p);
   static void deleteArray_mcpart(void *p);
   static void destruct_mcpart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mcpart*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mcpart) == sizeof(::ROOT::Shadow::mcpart));
      ::mcpart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mcpart),0);
      static ::ROOT::TGenericClassInfo 
         instance("mcpart", "./mcpart.hh", 21,
                  typeid(::mcpart), DefineBehavior(ptr, ptr),
                  &mcpart_ShowMembers, &mcpart_Dictionary, isa_proxy, 4,
                  sizeof(::mcpart) );
      instance.SetNew(&new_mcpart);
      instance.SetNewArray(&newArray_mcpart);
      instance.SetDelete(&delete_mcpart);
      instance.SetDeleteArray(&deleteArray_mcpart);
      instance.SetDestructor(&destruct_mcpart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mcpart*)
   {
      return GenerateInitInstanceLocal((::mcpart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mcpart*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mcpart_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mcpart*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pmtfifo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pmtfifo_Dictionary();
   static void *new_pmtfifo(void *p = 0);
   static void *newArray_pmtfifo(Long_t size, void *p);
   static void delete_pmtfifo(void *p);
   static void deleteArray_pmtfifo(void *p);
   static void destruct_pmtfifo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pmtfifo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::pmtfifo) == sizeof(::ROOT::Shadow::pmtfifo));
      ::pmtfifo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::pmtfifo),0);
      static ::ROOT::TGenericClassInfo 
         instance("pmtfifo", "./pmtfifo.hh", 21,
                  typeid(::pmtfifo), DefineBehavior(ptr, ptr),
                  &pmtfifo_ShowMembers, &pmtfifo_Dictionary, isa_proxy, 4,
                  sizeof(::pmtfifo) );
      instance.SetNew(&new_pmtfifo);
      instance.SetNewArray(&newArray_pmtfifo);
      instance.SetDelete(&delete_pmtfifo);
      instance.SetDeleteArray(&deleteArray_pmtfifo);
      instance.SetDestructor(&destruct_pmtfifo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pmtfifo*)
   {
      return GenerateInitInstanceLocal((::pmtfifo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pmtfifo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pmtfifo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::pmtfifo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void storage_manager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void storage_manager_Dictionary();
   static void *new_storage_manager(void *p = 0);
   static void *newArray_storage_manager(Long_t size, void *p);
   static void delete_storage_manager(void *p);
   static void deleteArray_storage_manager(void *p);
   static void destruct_storage_manager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::storage_manager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::storage_manager) == sizeof(::ROOT::Shadow::storage_manager));
      ::storage_manager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::storage_manager),0);
      static ::ROOT::TGenericClassInfo 
         instance("storage_manager", "./storage_manager.hh", 39,
                  typeid(::storage_manager), DefineBehavior(ptr, ptr),
                  &storage_manager_ShowMembers, &storage_manager_Dictionary, isa_proxy, 4,
                  sizeof(::storage_manager) );
      instance.SetNew(&new_storage_manager);
      instance.SetNewArray(&newArray_storage_manager);
      instance.SetDelete(&delete_storage_manager);
      instance.SetDeleteArray(&deleteArray_storage_manager);
      instance.SetDestructor(&destruct_storage_manager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::storage_manager*)
   {
      return GenerateInitInstanceLocal((::storage_manager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::storage_manager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void storage_manager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::storage_manager*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void storage_manager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class storage_manager.
      typedef ::ROOT::Shadow::storage_manager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::storage_manager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index", &sobj->_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents", &sobj->_nevents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents_read", &sobj->_nevents_read);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents_written", &sobj->_nevents_written);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_status", &sobj->_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mode", &sobj->_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_read_data_array[30]", sobj->_read_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_write_data_array[30]", sobj->_write_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ptr_data_array[30]", &sobj->_ptr_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_out_fname", (void*)&sobj->_out_fname);
      R__insp.InspectMember("string", (void*)&sobj->_out_fname, "_out_fname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_in_fnames", (void*)&sobj->_in_fnames);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_in_fnames, "_in_fnames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name_tdirectory", (void*)&sobj->_name_tdirectory);
      R__insp.InspectMember("string", (void*)&sobj->_name_tdirectory, "_name_tdirectory.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_fout", &sobj->_fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_in_ch", &sobj->_in_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_out_ch", &sobj->_out_ch);
      R__insp.GenericShowMembers("FrameworkBase", ( ::FrameworkBase * )( (::storage_manager*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_storage_manager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::storage_manager : new ::storage_manager;
   }
   static void *newArray_storage_manager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::storage_manager[nElements] : new ::storage_manager[nElements];
   }
   // Wrapper around operator delete
   static void delete_storage_manager(void *p) {
      delete ((::storage_manager*)p);
   }
   static void deleteArray_storage_manager(void *p) {
      delete [] ((::storage_manager*)p);
   }
   static void destruct_storage_manager(void *p) {
      typedef ::storage_manager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::storage_manager

//______________________________________________________________________________
namespace ROOT {
   void data_base_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class data_base.
      typedef ::ROOT::Shadow::data_base ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", &sobj->_type);
      R__insp.GenericShowMembers("FrameworkBase", ( ::FrameworkBase * )( (::data_base*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_data_base(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::data_base : new ::data_base;
   }
   static void *newArray_data_base(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::data_base[nElements] : new ::data_base[nElements];
   }
   // Wrapper around operator delete
   static void delete_data_base(void *p) {
      delete ((::data_base*)p);
   }
   static void deleteArray_data_base(void *p) {
      delete [] ((::data_base*)p);
   }
   static void destruct_data_base(void *p) {
      typedef ::data_base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::data_base

//______________________________________________________________________________
namespace ROOT {
   void track_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class track.
      typedef ::ROOT::Shadow::track ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::track*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_tracks", &sobj->_num_tracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackID[300]", sobj->_trackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startx[300]", sobj->_startx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_starty[300]", sobj->_starty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startz[300]", sobj->_startz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startd[300]", sobj->_startd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endx[300]", sobj->_endx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endy[300]", sobj->_endy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endz[300]", sobj->_endz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endd[300]", sobj->_endd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_theta[300]", sobj->_theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_phi[300]", sobj->_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startmom[300]", sobj->_startmom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_len[300]", sobj->_len);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_points", &sobj->_num_points);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxID[10000]", sobj->_vtxID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxx[10000]", sobj->_vtxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxy[10000]", sobj->_vtxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxz[10000]", sobj->_vtxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dirx[10000]", sobj->_dirx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_diry[10000]", sobj->_diry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dirz[10000]", sobj->_dirz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mom[10000]", sobj->_mom);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::track*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_track(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::track : new ::track;
   }
   static void *newArray_track(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::track[nElements] : new ::track[nElements];
   }
   // Wrapper around operator delete
   static void delete_track(void *p) {
      delete ((::track*)p);
   }
   static void deleteArray_track(void *p) {
      delete [] ((::track*)p);
   }
   static void destruct_track(void *p) {
      typedef ::track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::track

//______________________________________________________________________________
namespace ROOT {
   void sps_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class sps.
      typedef ::ROOT::Shadow::sps ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::sps*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_sps", &sobj->_num_sps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spsID[10000]", sobj->_spsID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxx[10000]", sobj->_vtxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxy[10000]", sobj->_vtxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxz[10000]", sobj->_vtxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxx_sigma[10000]", sobj->_vtxx_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxy_sigma[10000]", sobj->_vtxy_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxz_sigma[10000]", sobj->_vtxz_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chi2[10000]", sobj->_chi2);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::sps*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_sps(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sps : new ::sps;
   }
   static void *newArray_sps(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sps[nElements] : new ::sps[nElements];
   }
   // Wrapper around operator delete
   static void delete_sps(void *p) {
      delete ((::sps*)p);
   }
   static void deleteArray_sps(void *p) {
      delete [] ((::sps*)p);
   }
   static void destruct_sps(void *p) {
      typedef ::sps current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::sps

//______________________________________________________________________________
namespace ROOT {
   void hit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class hit.
      typedef ::ROOT::Shadow::hit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::hit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_hits", &sobj->_num_hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_plane[20000]", sobj->_plane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel[20000]", sobj->_channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_wire[20000]", sobj->_wire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startT[20000]", sobj->_startT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakT[20000]", sobj->_peakT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endT[20000]", sobj->_endT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_charge[20000]", sobj->_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startT_sigma[20000]", sobj->_startT_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakT_sigma[20000]", sobj->_peakT_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endT_sigma[20000]", sobj->_endT_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_charge_sigma[20000]", sobj->_charge_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_gof[20000]", sobj->_gof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackID[20000]", sobj->_trackID);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::hit*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_hit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::hit : new ::hit;
   }
   static void *newArray_hit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::hit[nElements] : new ::hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_hit(void *p) {
      delete ((::hit*)p);
   }
   static void deleteArray_hit(void *p) {
      delete [] ((::hit*)p);
   }
   static void destruct_hit(void *p) {
      typedef ::hit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::hit

//______________________________________________________________________________
namespace ROOT {
   void mctruth_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mctruth.
      typedef ::ROOT::Shadow::mctruth ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mctruth*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_part", &sobj->_num_part);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pdgid[20000]", sobj->_pdgid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_status_code[20000]", sobj->_status_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_gen_trackID[20000]", sobj->_gen_trackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_origin[20000]", sobj->_origin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_daughter[20000]", sobj->_num_daughter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mother[20000]", sobj->_mother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxx[20000]", sobj->_vtxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxy[20000]", sobj->_vtxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxz[20000]", sobj->_vtxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mass[20000]", sobj->_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_E[20000]", sobj->_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mom[20000]", sobj->_mom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momx[20000]", sobj->_momx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momy[20000]", sobj->_momy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momz[20000]", sobj->_momz);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::mctruth*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mctruth(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mctruth : new ::mctruth;
   }
   static void *newArray_mctruth(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mctruth[nElements] : new ::mctruth[nElements];
   }
   // Wrapper around operator delete
   static void delete_mctruth(void *p) {
      delete ((::mctruth*)p);
   }
   static void deleteArray_mctruth(void *p) {
      delete [] ((::mctruth*)p);
   }
   static void destruct_mctruth(void *p) {
      typedef ::mctruth current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mctruth

//______________________________________________________________________________
namespace ROOT {
   void cluster_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class cluster.
      typedef ::ROOT::Shadow::cluster ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::cluster*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_clusters", &sobj->_num_clusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_clusterID[1000]", sobj->_clusterID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_view[1000]", sobj->_view);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_charge[1000]", sobj->_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dtdw[1000]", sobj->_dtdw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dtdw_sigma[1000]", sobj->_dtdw_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dqdw[1000]", sobj->_dqdw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dqdw_sigma[1000]", sobj->_dqdw_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startx[1000]", sobj->_startx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_starty[1000]", sobj->_starty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startz[1000]", sobj->_startz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startx_sigma[1000]", sobj->_startx_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_starty_sigma[1000]", sobj->_starty_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startz_sigma[1000]", sobj->_startz_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endx[1000]", sobj->_endx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endy[1000]", sobj->_endy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endz[1000]", sobj->_endz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endx_sigma[1000]", sobj->_endx_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endy_sigma[1000]", sobj->_endy_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endz_sigma[1000]", sobj->_endz_sigma);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::cluster*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_cluster(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::cluster : new ::cluster;
   }
   static void *newArray_cluster(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::cluster[nElements] : new ::cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_cluster(void *p) {
      delete ((::cluster*)p);
   }
   static void deleteArray_cluster(void *p) {
      delete [] ((::cluster*)p);
   }
   static void destruct_cluster(void *p) {
      typedef ::cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::cluster

//______________________________________________________________________________
namespace ROOT {
   void mcnu_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mcnu.
      typedef ::ROOT::Shadow::mcnu ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mcnu*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_nu", &sobj->_num_nu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pdgid[100]", sobj->_pdgid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ccnc[100]", sobj->_ccnc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mode[100]", sobj->_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_q2[100]", sobj->_q2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hmass[100]", sobj->_hmass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hitnuc[100]", sobj->_hitnuc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxx[100]", sobj->_vtxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxy[100]", sobj->_vtxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtxz[100]", sobj->_vtxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_E[100]", sobj->_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momx[100]", sobj->_momx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momy[100]", sobj->_momy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momz[100]", sobj->_momz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_E_lep[100]", sobj->_E_lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momx_lep[100]", sobj->_momx_lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momy_lep[100]", sobj->_momy_lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momz_lep[100]", sobj->_momz_lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momx_parent[100]", sobj->_momx_parent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momy_parent[100]", sobj->_momy_parent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momz_parent[100]", sobj->_momz_parent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pdgid_parent[100]", sobj->_pdgid_parent);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::mcnu*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mcnu(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mcnu : new ::mcnu;
   }
   static void *newArray_mcnu(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mcnu[nElements] : new ::mcnu[nElements];
   }
   // Wrapper around operator delete
   static void delete_mcnu(void *p) {
      delete ((::mcnu*)p);
   }
   static void deleteArray_mcnu(void *p) {
      delete [] ((::mcnu*)p);
   }
   static void destruct_mcnu(void *p) {
      typedef ::mcnu current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mcnu

//______________________________________________________________________________
namespace ROOT {
   void mcpart_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mcpart.
      typedef ::ROOT::Shadow::mcpart ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mcpart*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_part_info_set", &sobj->_part_info_set);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_part_info_set", &sobj->_fv_part_info_set);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_part", &sobj->_num_part);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackID[10000]", sobj->_trackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pdgid[10000]", sobj->_pdgid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_status_code[10000]", sobj->_status_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momx[10000]", sobj->_momx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momy[10000]", sobj->_momy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_momz[10000]", sobj->_momz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startx[10000]", sobj->_startx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_starty[10000]", sobj->_starty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startz[10000]", sobj->_startz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_startt[10000]", sobj->_startt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endx[10000]", sobj->_endx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endy[10000]", sobj->_endy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endz[10000]", sobj->_endz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_endt[10000]", sobj->_endt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mom[10000]", sobj->_mom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_len[10000]", sobj->_len);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_momx[10000]", sobj->_fv_momx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_momy[10000]", sobj->_fv_momy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_momz[10000]", sobj->_fv_momz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_startx[10000]", sobj->_fv_startx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_starty[10000]", sobj->_fv_starty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_startz[10000]", sobj->_fv_startz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_startt[10000]", sobj->_fv_startt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_endx[10000]", sobj->_fv_endx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_endy[10000]", sobj->_fv_endy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_endz[10000]", sobj->_fv_endz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_endt[10000]", sobj->_fv_endt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_mom[10000]", sobj->_fv_mom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fv_len[10000]", sobj->_fv_len);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::mcpart*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mcpart(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mcpart : new ::mcpart;
   }
   static void *newArray_mcpart(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mcpart[nElements] : new ::mcpart[nElements];
   }
   // Wrapper around operator delete
   static void delete_mcpart(void *p) {
      delete ((::mcpart*)p);
   }
   static void deleteArray_mcpart(void *p) {
      delete [] ((::mcpart*)p);
   }
   static void destruct_mcpart(void *p) {
      typedef ::mcpart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mcpart

//______________________________________________________________________________
namespace ROOT {
   void event_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class event.
      typedef ::ROOT::Shadow::event ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::event*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_eventID", &sobj->_eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_runID", &sobj->_runID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_subrunID", &sobj->_subrunID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_triggerT", &sobj->_triggerT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_beamT", &sobj->_beamT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pot", &sobj->_pot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_etau", &sobj->_etau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isdata", &sobj->_isdata);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::event*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_event(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::event : new ::event;
   }
   static void *newArray_event(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::event[nElements] : new ::event[nElements];
   }
   // Wrapper around operator delete
   static void delete_event(void *p) {
      delete ((::event*)p);
   }
   static void deleteArray_event(void *p) {
      delete [] ((::event*)p);
   }
   static void destruct_event(void *p) {
      typedef ::event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::event

//______________________________________________________________________________
namespace ROOT {
   void pmtfifo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pmtfifo.
      typedef ::ROOT::Shadow::pmtfifo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::pmtfifo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_pmtfifo", &sobj->_num_pmtfifo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel[2000]", sobj->_channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_discID[2000]", sobj->_discID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_frame[2000]", sobj->_frame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sample[2000]", sobj->_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index[2000]", sobj->_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_size[2000]", sobj->_size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_num_adc", &sobj->_num_adc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_adc[120000]", sobj->_adc);
      R__insp.GenericShowMembers("data_base", ( ::data_base * )( (::pmtfifo*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pmtfifo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pmtfifo : new ::pmtfifo;
   }
   static void *newArray_pmtfifo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pmtfifo[nElements] : new ::pmtfifo[nElements];
   }
   // Wrapper around operator delete
   static void delete_pmtfifo(void *p) {
      delete ((::pmtfifo*)p);
   }
   static void deleteArray_pmtfifo(void *p) {
      delete [] ((::pmtfifo*)p);
   }
   static void destruct_pmtfifo(void *p) {
      typedef ::pmtfifo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pmtfifo

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* DataFormatCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataFormatCint();

extern "C" void G__set_cpp_environmentDataFormatCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DataFormat-TypeDef.hh");
  G__add_compiledheader("DataTypeConstants.hh");
  G__add_compiledheader("cluster.hh");
  G__add_compiledheader("data_base.hh");
  G__add_compiledheader("event.hh");
  G__add_compiledheader("hit.hh");
  G__add_compiledheader("mcnu.hh");
  G__add_compiledheader("mcpart.hh");
  G__add_compiledheader("mcstep.hh");
  G__add_compiledheader("mctruth.hh");
  G__add_compiledheader("pmtfifo.hh");
  G__add_compiledheader("spacepoint.hh");
  G__add_compiledheader("storage_manager.hh");
  G__add_compiledheader("track.hh");
  G__cpp_reset_tagtableDataFormatCint();
}
#include <new>
extern "C" int G__cpp_dllrevDataFormatCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DATA */

/* data_base */
static int G__DataFormatCint_589_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   data_base* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new data_base((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) data_base((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new data_base[n];
       } else {
         p = new((void*) gvp) data_base[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new data_base;
       } else {
         p = new((void*) gvp) data_base;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_589_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((data_base*) G__getstructoffset())->clear_event((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((data_base*) G__getstructoffset())->clear_event();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_589_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((data_base*) G__getstructoffset())->initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_589_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((data_base*) G__getstructoffset())->set_address((TTree*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((data_base*) G__getstructoffset())->set_address((TTree*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_589_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   data_base* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new data_base(*(data_base*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef data_base G__Tdata_base;
static int G__DataFormatCint_589_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (data_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((data_base*) (soff+(sizeof(data_base)*i)))->~G__Tdata_base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (data_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((data_base*) (soff))->~G__Tdata_base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_589_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   data_base* dest = (data_base*) G__getstructoffset();
   *dest = *(data_base*) libp->para[0].ref;
   const data_base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* event */
static int G__DataFormatCint_590_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   event* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new event[n];
     } else {
       p = new((void*) gvp) event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new event;
     } else {
       p = new((void*) gvp) event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((event*) G__getstructoffset())->set_event(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const event*) G__getstructoffset())->eventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const event*) G__getstructoffset())->runID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const event*) G__getstructoffset())->subrunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const event*) G__getstructoffset())->triggerT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const event*) G__getstructoffset())->beamT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const event*) G__getstructoffset())->pot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const event*) G__getstructoffset())->etau());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const event*) G__getstructoffset())->isdata());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_590_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new event(*(event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef event G__Tevent;
static int G__DataFormatCint_590_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((event*) (soff+(sizeof(event)*i)))->~G__Tevent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((event*) (soff))->~G__Tevent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_590_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   event* dest = (event*) G__getstructoffset();
   *dest = *(event*) libp->para[0].ref;
   const event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hit */
static int G__DataFormatCint_591_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hit((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) hit((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new hit[n];
       } else {
         p = new((void*) gvp) hit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new hit;
       } else {
         p = new((void*) gvp) hit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hit*) G__getstructoffset())->add_hit(
(UChar_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (UShort_t) G__int(libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const hit*) G__getstructoffset())->num_hits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const hit*) G__getstructoffset())->plane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const hit*) G__getstructoffset())->wire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const hit*) G__getstructoffset())->channel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->startT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->peakT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->endT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->startT_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->peakT_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->endT_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->charge_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const hit*) G__getstructoffset())->gof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_591_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const hit*) G__getstructoffset())->trackID());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_591_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hit(*(hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hit G__Thit;
static int G__DataFormatCint_591_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hit*) (soff+(sizeof(hit)*i)))->~G__Thit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hit*) (soff))->~G__Thit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_591_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hit* dest = (hit*) G__getstructoffset();
   *dest = *(hit*) libp->para[0].ref;
   const hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* cluster */
static int G__DataFormatCint_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new cluster((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) cluster((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new cluster[n];
       } else {
         p = new((void*) gvp) cluster[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new cluster;
       } else {
         p = new((void*) gvp) cluster;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((cluster*) G__getstructoffset())->add_cluster(
(UShort_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const cluster*) G__getstructoffset())->num_clusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const cluster*) G__getstructoffset())->clusterID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const cluster*) G__getstructoffset())->view());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const cluster*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const cluster*) G__getstructoffset())->dtdw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const cluster*) G__getstructoffset())->dtdw_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const cluster*) G__getstructoffset())->dqdw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const cluster*) G__getstructoffset())->dqdw_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->startx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->starty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->startz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->startx_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->starty_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->startz_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endx_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endy_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_592_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const cluster*) G__getstructoffset())->endz_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_592_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   cluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new cluster(*(cluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef cluster G__Tcluster;
static int G__DataFormatCint_592_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((cluster*) (soff+(sizeof(cluster)*i)))->~G__Tcluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((cluster*) (soff))->~G__Tcluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_592_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   cluster* dest = (cluster*) G__getstructoffset();
   *dest = *(cluster*) libp->para[0].ref;
   const cluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sps */
static int G__DataFormatCint_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sps* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sps[n];
     } else {
       p = new((void*) gvp) sps[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sps;
     } else {
       p = new((void*) gvp) sps;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_sps));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const sps*) G__getstructoffset())->num_sps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const sps*) G__getstructoffset())->spsID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxx_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxy_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->vtxz_sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const sps*) G__getstructoffset())->chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sps*) G__getstructoffset())->add_spacepoint(
(UShort_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sps* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sps(*(sps*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_sps));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sps G__Tsps;
static int G__DataFormatCint_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sps*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sps*) (soff+(sizeof(sps)*i)))->~G__Tsps();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sps*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sps*) (soff))->~G__Tsps();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sps* dest = (sps*) G__getstructoffset();
   *dest = *(sps*) libp->para[0].ref;
   const sps& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* track */
static int G__DataFormatCint_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   track* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new track((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) track((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new track[n];
       } else {
         p = new((void*) gvp) track[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new track;
       } else {
         p = new((void*) gvp) track;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((track*) G__getstructoffset())->add_track(
(UShort_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const track*) G__getstructoffset())->num_tracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const track*) G__getstructoffset())->trackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->startx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->starty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->startz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->startd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->endx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->endy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->endz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->endd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const track*) G__getstructoffset())->startmom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const track*) G__getstructoffset())->len());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((track*) G__getstructoffset())->add_trajectory(
(UShort_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const track*) G__getstructoffset())->num_points());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const track*) G__getstructoffset())->vtxID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->vtxx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->vtxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->vtxz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->dirx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->diry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const track*) G__getstructoffset())->dirz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_653_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const track*) G__getstructoffset())->mom());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_653_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new track(*(track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef track G__Ttrack;
static int G__DataFormatCint_653_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((track*) (soff+(sizeof(track)*i)))->~G__Ttrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((track*) (soff))->~G__Ttrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_653_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   track* dest = (track*) G__getstructoffset();
   *dest = *(track*) libp->para[0].ref;
   const track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mctruth */
static int G__DataFormatCint_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mctruth* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mctruth((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) mctruth((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new mctruth[n];
       } else {
         p = new((void*) gvp) mctruth[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new mctruth;
       } else {
         p = new((void*) gvp) mctruth;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mctruth));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const mctruth*) G__getstructoffset())->num_part());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mctruth*) G__getstructoffset())->pdgid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mctruth*) G__getstructoffset())->vtxx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mctruth*) G__getstructoffset())->vtxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mctruth*) G__getstructoffset())->vtxz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->mom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->momx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->momy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->momz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->E());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mctruth*) G__getstructoffset())->mass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mctruth*) G__getstructoffset())->status_code());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const mctruth*) G__getstructoffset())->gen_trackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const mctruth*) G__getstructoffset())->origin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mctruth*) G__getstructoffset())->num_daughter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mctruth*) G__getstructoffset())->mother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_654_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mctruth*) G__getstructoffset())->add_primary(
(Int_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_654_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mctruth* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mctruth(*(mctruth*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mctruth));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mctruth G__Tmctruth;
static int G__DataFormatCint_654_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mctruth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mctruth*) (soff+(sizeof(mctruth)*i)))->~G__Tmctruth();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mctruth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mctruth*) (soff))->~G__Tmctruth();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_654_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mctruth* dest = (mctruth*) G__getstructoffset();
   *dest = *(mctruth*) libp->para[0].ref;
   const mctruth& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mcnu */
static int G__DataFormatCint_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcnu* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mcnu((DATA::DATA_TYPE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) mcnu((DATA::DATA_TYPE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new mcnu[n];
       } else {
         p = new((void*) gvp) mcnu[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new mcnu;
       } else {
         p = new((void*) gvp) mcnu;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mcnu));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mcnu*) G__getstructoffset())->add_neutrino(
(Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const mcnu*) G__getstructoffset())->num_nu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mcnu*) G__getstructoffset())->pdgid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((const mcnu*) G__getstructoffset())->ccnc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const mcnu*) G__getstructoffset())->mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->q2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->hmass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mcnu*) G__getstructoffset())->hitnuc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mcnu*) G__getstructoffset())->vtxx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mcnu*) G__getstructoffset())->vtxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const mcnu*) G__getstructoffset())->vtxz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->E());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->E_lep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momx_lep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momy_lep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momz_lep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momx_parent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momy_parent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const mcnu*) G__getstructoffset())->momz_parent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_655_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const mcnu*) G__getstructoffset())->pdgid_parent());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_655_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mcnu* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mcnu(*(mcnu*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mcnu));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mcnu G__Tmcnu;
static int G__DataFormatCint_655_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mcnu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mcnu*) (soff+(sizeof(mcnu)*i)))->~G__Tmcnu();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mcnu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mcnu*) (soff))->~G__Tmcnu();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_655_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcnu* dest = (mcnu*) G__getstructoffset();
   *dest = *(mcnu*) libp->para[0].ref;
   const mcnu& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mcpart */
static int G__DataFormatCint_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcpart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mcpart[n];
     } else {
       p = new((void*) gvp) mcpart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mcpart;
     } else {
       p = new((void*) gvp) mcpart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mcpart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mcpart*) G__getstructoffset())->add_particle((UShort_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mcpart*) G__getstructoffset())->set_part_info(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mcpart*) G__getstructoffset())->set_fv_part_info(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mcpart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mcpart(*(mcpart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_mcpart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mcpart G__Tmcpart;
static int G__DataFormatCint_656_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mcpart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mcpart*) (soff+(sizeof(mcpart)*i)))->~G__Tmcpart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mcpart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mcpart*) (soff))->~G__Tmcpart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_656_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mcpart* dest = (mcpart*) G__getstructoffset();
   *dest = *(mcpart*) libp->para[0].ref;
   const mcpart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pmtfifo */
static int G__DataFormatCint_658_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmtfifo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmtfifo[n];
     } else {
       p = new((void*) gvp) pmtfifo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmtfifo;
     } else {
       p = new((void*) gvp) pmtfifo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const pmtfifo*) G__getstructoffset())->num_pmtfifo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const pmtfifo*) G__getstructoffset())->channel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const pmtfifo*) G__getstructoffset())->discID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const pmtfifo*) G__getstructoffset())->frame());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const pmtfifo*) G__getstructoffset())->sample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const pmtfifo*) G__getstructoffset())->index());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const pmtfifo*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmtfifo*) G__getstructoffset())->num_adc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const pmtfifo*) G__getstructoffset())->adc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_658_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmtfifo*) G__getstructoffset())->add_pmtfifo((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, *((const vector<UShort_t>*) G__int(libp->para[4])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_658_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pmtfifo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pmtfifo(*(pmtfifo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pmtfifo G__Tpmtfifo;
static int G__DataFormatCint_658_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pmtfifo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pmtfifo*) (soff+(sizeof(pmtfifo)*i)))->~G__Tpmtfifo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pmtfifo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pmtfifo*) (soff))->~G__Tpmtfifo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_658_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmtfifo* dest = (pmtfifo*) G__getstructoffset();
   *dest = *(pmtfifo*) libp->para[0].ref;
   const pmtfifo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* storage_manager */
static int G__DataFormatCint_659_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   storage_manager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new storage_manager((storage_manager::MODE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) storage_manager((storage_manager::MODE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new storage_manager[n];
       } else {
         p = new((void*) gvp) storage_manager[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new storage_manager;
       } else {
         p = new((void*) gvp) storage_manager;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((storage_manager*) G__getstructoffset())->set_data_to_read((DATA::DATA_TYPE) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((storage_manager*) G__getstructoffset())->set_data_to_read((DATA::DATA_TYPE) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->set_io_mode((storage_manager::MODE) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->add_in_filename(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->set_in_rootdir(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->set_out_filename(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const storage_manager*) G__getstructoffset())->io_mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const storage_manager*) G__getstructoffset())->input_filename();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const storage_manager*) G__getstructoffset())->output_filename();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const storage_manager*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->is_open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->is_ready_io());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->next_event());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->go_to((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->close());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((storage_manager*) G__getstructoffset())->get_data((DATA::DATA_TYPE) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) storage_manager::get());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      storage_manager::kill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_index());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entries_read());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entires_written());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_659_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const storage_manager*) G__getstructoffset())->get_tree());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_659_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   storage_manager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new storage_manager(*(storage_manager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef storage_manager G__Tstorage_manager;
static int G__DataFormatCint_659_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (storage_manager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((storage_manager*) (soff+(sizeof(storage_manager)*i)))->~G__Tstorage_manager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (storage_manager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((storage_manager*) (soff))->~G__Tstorage_manager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_659_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   storage_manager* dest = (storage_manager*) G__getstructoffset();
   *dest = *(storage_manager*) libp->para[0].ref;
   const storage_manager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DATA */

/* data_base */

/* event */

/* hit */

/* cluster */

/* sps */

/* track */

/* mctruth */

/* mcnu */

/* mcpart */

/* pmtfifo */

/* storage_manager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataFormatCint {
 public:
  G__Sizep2memfuncDataFormatCint(): p(&G__Sizep2memfuncDataFormatCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataFormatCint::*p)();
};

size_t G__get_sizep2memfuncDataFormatCint()
{
  G__Sizep2memfuncDataFormatCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataFormatCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_data_base))) {
     data_base *G__Lderived;
     G__Lderived=(data_base*)0x1000;
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_event))) {
     event *G__Lderived;
     G__Lderived=(event*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_event),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_event),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_hit))) {
     hit *G__Lderived;
     G__Lderived=(hit*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_hit),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_hit),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_cluster))) {
     cluster *G__Lderived;
     G__Lderived=(cluster*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_cluster),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_cluster),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_sps))) {
     sps *G__Lderived;
     G__Lderived=(sps*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_sps),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_sps),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_track))) {
     track *G__Lderived;
     G__Lderived=(track*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_track),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_track),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_mctruth))) {
     mctruth *G__Lderived;
     G__Lderived=(mctruth*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mctruth),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mctruth),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_mcnu))) {
     mcnu *G__Lderived;
     G__Lderived=(mcnu*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcnu),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcnu),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_mcpart))) {
     mcpart *G__Lderived;
     G__Lderived=(mcpart*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcpart),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcpart),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo))) {
     pmtfifo *G__Lderived;
     G__Lderived=(pmtfifo*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager))) {
     storage_manager *G__Lderived;
     G__Lderived=(storage_manager*)0x1000;
     {
       FrameworkBase *G__Lpbase=(FrameworkBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager),G__get_linked_tagnum(&G__DataFormatCintLN_FrameworkBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataFormatCint() {

   /* Setting up typedef entry */
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DATA */
static void G__setup_memvarDATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_DATA));
   {
   G__memvar_setup((void*)(&DATA::kMaxTracks),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxTracks=",0,"/< Maximum number of tracks to be held in C-array");
   G__memvar_setup((void*)(&DATA::kMaxTrackPoints),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxTrackPoints=",0,"/< Maximum number of track trajectory points to be held in C-array");
   G__memvar_setup((void*)(&DATA::kMaxSpacePoints),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxSpacePoints=",0,"/< Maximum number of spacepoints to be held in C-array");
   G__memvar_setup((void*)(&DATA::kMaxHits),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxHits=",0,"/< Maximum number of hits to be held in C-array");
   G__memvar_setup((void*)(&DATA::kMaxPrimaries),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxPrimaries=",0,"/< Maximum number of primary particles from generator");
   G__memvar_setup((void*)(&DATA::kMaxClusters),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxClusters=",0,"/< Maximum number of clusters");
   G__memvar_setup((void*)(&DATA::kMaxNeutrinos),98,0,1,-1,G__defined_typename("UChar_t"),-1,1,"kMaxNeutrinos=",0,"/< Maximum number of neutrinos per event produced by a generator");
   G__memvar_setup((void*)(&DATA::kMaxParticles),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxParticles=",0,"/< Maximum number of particles from G4 tracking info");
   G__memvar_setup((void*)(&DATA::kMaxTrajectories),104,0,1,-1,G__defined_typename("UInt_t"),-1,1,"kMaxTrajectories=",0,"/< Maximum number of particle's trajectory points that can be stored");
   G__memvar_setup((void*)(&DATA::kMaxPMTFIFO),114,0,1,-1,G__defined_typename("UShort_t"),-1,1,"kMaxPMTFIFO=",0,"/< Maximum number of discriminator fire");
   G__memvar_setup((void*)(&DATA::kMaxPMTWords),104,0,1,-1,G__defined_typename("UInt_t"),-1,1,"kMaxPMTWords=",0,"/< Maximum number of ADC samples to store (2 beamgate per channel)");
   G__memvar_setup((void*)(&DATA::TREE_NAME),117,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-1,1,"TREE_NAME=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Event=%lldLL",(long long)DATA::Event).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("UserInfo=%lldLL",(long long)DATA::UserInfo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("MCNeutrino=%lldLL",(long long)DATA::MCNeutrino).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("GENIE_MCNeutrino=%lldLL",(long long)DATA::GENIE_MCNeutrino).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("MCTruth=%lldLL",(long long)DATA::MCTruth).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("CRY_MCTruth=%lldLL",(long long)DATA::CRY_MCTruth).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("GENIE_MCTruth=%lldLL",(long long)DATA::GENIE_MCTruth).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("MCParticle=%lldLL",(long long)DATA::MCParticle).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("MCTrajectory=%lldLL",(long long)DATA::MCTrajectory).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("FIFOChannel=%lldLL",(long long)DATA::FIFOChannel).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Wire=%lldLL",(long long)DATA::Wire).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Hit=%lldLL",(long long)DATA::Hit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("CrawlerHit=%lldLL",(long long)DATA::CrawlerHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("GausHit=%lldLL",(long long)DATA::GausHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("APAHit=%lldLL",(long long)DATA::APAHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("FFTHit=%lldLL",(long long)DATA::FFTHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("RFFHit=%lldLL",(long long)DATA::RFFHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Cluster=%lldLL",(long long)DATA::Cluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("FuzzyCluster=%lldLL",(long long)DATA::FuzzyCluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("DBCluster=%lldLL",(long long)DATA::DBCluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("CrawlerCluster=%lldLL",(long long)DATA::CrawlerCluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("HoughCluster=%lldLL",(long long)DATA::HoughCluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Seed=%lldLL",(long long)DATA::Seed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("SpacePoint=%lldLL",(long long)DATA::SpacePoint).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Track=%lldLL",(long long)DATA::Track).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Bezier=%lldLL",(long long)DATA::Bezier).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Kalman3DSPS=%lldLL",(long long)DATA::Kalman3DSPS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Kalman3DHit=%lldLL",(long long)DATA::Kalman3DHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Shower=%lldLL",(long long)DATA::Shower).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("Calorimetry=%lldLL",(long long)DATA::Calorimetry).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-2,1,G__FastAllocString(2048).Format("DATA_TYPE_MAX=%lldLL",(long long)DATA::DATA_TYPE_MAX).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&DATA::DATA_TREE_NAME),117,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-5,1,"DATA_TREE_NAME[30]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* data_base */
static void G__setup_memvardata_base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   { data_base *p; p=(data_base*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_DATAcLcLDATA_TYPE),-1,-1,2,"_type=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* event */
static void G__setup_memvarevent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_event));
   { event *p; p=(event*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_eventID=",0,"/< Event counter ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_runID=",0,"/< Run number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_subrunID=",0,"/< Sub-Run number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_triggerT=",0,"/< Trigger time in second");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_beamT=",0,"/< Beam time in second");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_pot=",0,"/< Protons on target");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_etau=",0,"/< Electron drift lifetime");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"_isdata=",0,"/< Flag: MC=0, DATA=1");
   }
   G__tag_memvar_reset();
}


   /* hit */
static void G__setup_memvarhit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_hit));
   { hit *p; p=(hit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_hits=",0,"/< Number of hits");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_plane[20000]=",0,"/< Wire plane ID");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_channel[20000]=",0,"/< Channel number");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_wire[20000]=",0,"/< Wire ID number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_startT[20000]=",0,"/< Hit start time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_peakT[20000]=",0,"/< Hit peak time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_endT[20000]=",0,"/< Hit end time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_charge[20000]=",0,"/< Hit charge");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_startT_sigma[20000]=",0,"/< Hit start time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_peakT_sigma[20000]=",0,"/< Hit peak time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_endT_sigma[20000]=",0,"/< Hit end time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_charge_sigma[20000]=",0,"/< Hit charge");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_gof[20000]=",0,"/< Goodness of hit");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_trackID[20000]=",0,"/< Associated track ID");
   }
   G__tag_memvar_reset();
}


   /* cluster */
static void G__setup_memvarcluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_cluster));
   { cluster *p; p=(cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_clusters=",0,"/< Number of clusters");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_clusterID[1000]=",0,"/< Cluster ID ");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_view[1000]=",0,"/< View_t key in LArSoft");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_charge[1000]=",0,"/< Charge sum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_dtdw[1000]=",0,"/< dt/dw ... d(time)/d(wire)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_dtdw_sigma[1000]=",0,"/< dt/dw sigma");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_dqdw[1000]=",0,"/< dq/dw ... d(charge)/d(wire)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_dqdw_sigma[1000]=",0,"/< dq/dw sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startx[1000]=",0,"/< Starting vtx X coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_starty[1000]=",0,"/< Starting vtx Y coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startz[1000]=",0,"/< Starting vtx Z coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startx_sigma[1000]=",0,"/< Starting vtx X coordinate sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_starty_sigma[1000]=",0,"/< Starting vtx Y coordinate sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startz_sigma[1000]=",0,"/< Starting vtx Z coordinate sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endx[1000]=",0,"/< Ending vtx X coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endy[1000]=",0,"/< Ending vtx Y coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endz[1000]=",0,"/< Ending vtx Z coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endx_sigma[1000]=",0,"/< Ending vtx X coordinate sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endy_sigma[1000]=",0,"/< Ending vtx Y coordinate sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endz_sigma[1000]=",0,"/< Ending vtx Z coordinate sigma");
   }
   G__tag_memvar_reset();
}


   /* sps */
static void G__setup_memvarsps(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_sps));
   { sps *p; p=(sps*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_sps=",0,"/< Number of space-points (SPS)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_spsID[10000]=",0,"/< SPS ID");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxx[10000]=",0,"/< SPS x coordinates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxy[10000]=",0,"/< SPS y coordinates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxz[10000]=",0,"/< SPS z coordinates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxx_sigma[10000]=",0,"/< SPS x coordinate errors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxy_sigma[10000]=",0,"/< SPS y coordinate errors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxz_sigma[10000]=",0,"/< SPS z coordinate errors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_chi2[10000]=",0,"/< SPS Chi2");
   }
   G__tag_memvar_reset();
}


   /* track */
static void G__setup_memvartrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_track));
   { track *p; p=(track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_tracks=",0,"/< Number of tracks");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_trackID[300]=",0,"/< Track ID");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startx[300]=",0,"/< Start position X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_starty[300]=",0,"/< Start position Y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startz[300]=",0,"/< Start position Z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startd[300]=",0,"/< Start distance to boundary");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endx[300]=",0,"/< End position X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endy[300]=",0,"/< End position Y   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endz[300]=",0,"/< End position Z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endd[300]=",0,"/< End distance to boundary");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_theta[300]=",0,"/< Theta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_phi[300]=",0,"/< Phi");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_startmom[300]=",0,"/< Total momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_len[300]=",0,"/< Track length ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_points=",0,"/< Number of trajectory points (for all tracks)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_vtxID[10000]=",0,"/< Array of associated track ID");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxx[10000]=",0,"/< X coordinate of trajectory point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxy[10000]=",0,"/< Y coordinate of trajectory point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxz[10000]=",0,"/< Z coordinate of trajectory point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_dirx[10000]=",0,"/< X component direction of a trajectory point along a track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_diry[10000]=",0,"/< Y component direction of a trajectory point along a track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_dirz[10000]=",0,"/< Z component direction of a trajectory point along a track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_mom[10000]=",0,"/< Momentum at a trajectory point");
   }
   G__tag_memvar_reset();
}


   /* mctruth */
static void G__setup_memvarmctruth(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mctruth));
   { mctruth *p; p=(mctruth*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_part=",0,"/< Number of primary particles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_pdgid[20000]=",0,"/< PDGID of a primary");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_status_code[20000]=",0,"/< Status code of a primary... WHAT IS STATUS CODE??");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_gen_trackID[20000]=",0,"/< Generation track ID of a primary ... (NOT G4 TRACK ID)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_origin[20000]=",0,"/< Generation track ID of a primary ... (NOT G4 TRACK ID)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_num_daughter[20000]=",0,"/< Number of daughters created by a primary");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_mother[20000]=",0,"/< The parent's track ID of a primary (if a parent exists)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxx[20000]=",0,"/< X coordinate position of a primary @ generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxy[20000]=",0,"/< Y coordinate position of a primary @ generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxz[20000]=",0,"/< Z coordinate position of a primary @ generation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_mass[20000]=",0,"/< Mass of a primary");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_E[20000]=",0,"/< Energy of a primary");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_mom[20000]=",0,"/< Momentum of a primary");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momx[20000]=",0,"/< X component momentum of a primary @ generation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momy[20000]=",0,"/< Y component momentum of a primary @ generation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momz[20000]=",0,"/< Z component momentum of a primary @ generation");
   }
   G__tag_memvar_reset();
}


   /* mcnu */
static void G__setup_memvarmcnu(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcnu));
   { mcnu *p; p=(mcnu*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_num_nu=",0,"/< Number of neutrinos");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_pdgid[100]=",0,"/< PDGID of a neutrino");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"_ccnc[100]=",0,"/< 0=CC, 1=NC");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_mode[100]=",0,"/< 0=QE/E1, 1=RES, 2=DIS, 3=Coherent interaction mode ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_q2[100]=",0,"/< Squared momentum transfer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_hmass[100]=",0,"/< Hadronic invariant mass");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_hitnuc[100]=",0,"/< PDGID of nucleus on which neutrino has interacted");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxx[100]=",0,"/< X coordinate position of the interaction vtx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxy[100]=",0,"/< Y coordinate position of the interaction vtx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_vtxz[100]=",0,"/< Z coordinate position of the interaction vtx");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_E[100]=",0,"/< Energy");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momx[100]=",0,"/< X component of neutrino momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momy[100]=",0,"/< Y component of neutrino momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momz[100]=",0,"/< Z component of neutrino momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_E_lep[100]=",0,"/< Energy of the outgoing lepton");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momx_lep[100]=",0,"/< X component of outgoing lepton momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momy_lep[100]=",0,"/< Y component of outgoing lepton momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momz_lep[100]=",0,"/< Z component of outgoing lepton momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momx_parent[100]=",0,"/< X component of parent particle momentum @ leaving BNB target");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momy_parent[100]=",0,"/< Y component of parent particle momentum @ leaving BNB target");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momz_parent[100]=",0,"/< Z component of parent particle momentum @ leaving BNB target");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_pdgid_parent[100]=",0,"/< PDGID of a parent particle @ leaving BNB target");
   }
   G__tag_memvar_reset();
}


   /* mcpart */
static void G__setup_memvarmcpart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcpart));
   { mcpart *p; p=(mcpart*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_part_info_set=",0,"/< Checker variable set to true by mcpart::set_part_info and false by mcpart::add_particle");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_fv_part_info_set=",0,"/< Checker variable set to true by mcpart::set_fv_part_info and false by mcpart::add_particle");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_part=",0,"/< Number of particles stored");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_trackID[10000]=",0,"/< Track ID ... unique per particle from G4");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_pdgid[10000]=",0,"/< PDGID of a particle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_status_code[10000]=",0,"/< Status code of a particle (what is this?)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momx[10000]=",0,"/< X component of momentum @ particle 1st step");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momy[10000]=",0,"/< Y component of momentum @ particle 1st step");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_momz[10000]=",0,"/< Z component of momentum @ particle 1st step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startx[10000]=",0,"/< X coordinate position @ particle 1st step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_starty[10000]=",0,"/< Y coordinate position @ particle 1st step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_startz[10000]=",0,"/< Z coordinate position @ particle 1st step");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_startt[10000]=",0,"/< Time (G4 definition) @ particle 1st step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endx[10000]=",0,"/< X coordinate position @ particle last step  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endy[10000]=",0,"/< Y coordinate position @ particle last step  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endz[10000]=",0,"/< Z coordinate position @ particle last step  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_endt[10000]=",0,"/< Time (G4 definition) @ particle last step  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_mom[10000]=",0,"/< Momentum (scalar magnitude) @ particle 1st step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_len[10000]=",0,"/< Summed length of particle's trajectories");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_fv_momx[10000]=",0,"/< X component of momentum @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_fv_momy[10000]=",0,"/< Y component of momentum @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_fv_momz[10000]=",0,"/< Z component of momentum @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_startx[10000]=",0,"/< X coordinate position @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_starty[10000]=",0,"/< Y coordinate position @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_startz[10000]=",0,"/< Z coordinate position @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_fv_startt[10000]=",0,"/< Time (G4 definition) @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_endx[10000]=",0,"/< X coordinate position @ particle last step in the Fiducial Volume  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_endy[10000]=",0,"/< Y coordinate position @ particle last step in the Fiducial Volume  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_endz[10000]=",0,"/< Z coordinate position @ particle last step in the Fiducial Volume  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_endt[10000]=",0,"/< Time (G4 definition) @ particle last step in the Fiducial Volume  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_fv_mom[10000]=",0,"/< Momentum (scalar magnitude) @ particle 1st step in the Fiducial Volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"_fv_len[10000]=",0,"/< Summed length of particle's trajectories in the Fiducial Volume");
   }
   G__tag_memvar_reset();
}


   /* pmtfifo */
static void G__setup_memvarpmtfifo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo));
   { pmtfifo *p; p=(pmtfifo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_num_pmtfifo=",0,"/< Number of space-points (SPS)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_channel[2000]=",0,"/< Channel number");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"_discID[2000]=",0,"/< Discriminator ID");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_frame[2000]=",0,"/< Frame ID");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_sample[2000]=",0,"/< Sample ID");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_index[2000]=",0,"/< Start index of corresponding ADC sample C-array");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_size[2000]=",0,"/< Length of ADC sample C-array");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_num_adc=",0,"/< Number of ADC count");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_adc[120000]=",0,"/< ADC sample combined for all channel");
   }
   G__tag_memvar_reset();
}


   /* storage_manager */
static void G__setup_memvarstorage_manager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   { storage_manager *p; p=(storage_manager*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("READ=%lldLL",(long long)storage_manager::READ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("WRITE=%lldLL",(long long)storage_manager::WRITE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("BOTH=%lldLL",(long long)storage_manager::BOTH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("UNDEFINED=%lldLL",(long long)storage_manager::UNDEFINED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("INIT=%lldLL",(long long)storage_manager::INIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("OPENED=%lldLL",(long long)storage_manager::OPENED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("READY_IO=%lldLL",(long long)storage_manager::READY_IO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("OPERATING=%lldLL",(long long)storage_manager::OPERATING).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("CLOSED=%lldLL",(long long)storage_manager::CLOSED).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager),-1,-2,4,"me=",0,"/< shared object instance pointer");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents_read=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents_written=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-1,4,"_status=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-1,4,"_mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_read_data_array[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_write_data_array[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_data_base),-1,-1,4,"_ptr_data_array[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-1,4,"_out_fname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"_in_fnames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-1,4,"_name_tdirectory=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TFile),-1,-1,4,"_fout=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TChain),-1,-1,4,"_in_ch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TTree),-1,-1,4,"_out_ch=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataFormatCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDATA(void) {
   /* DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_DATA));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdata_base(void) {
   /* data_base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   G__memfunc_setup("data_base",916,G__DataFormatCint_589_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::DATA_TYPE_MAX' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,G__DataFormatCint_589_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initialize",1074,G__DataFormatCint_589_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,G__DataFormatCint_589_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("data_base", 916, G__DataFormatCint_589_0_5, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 1, 1, 1, 0, "u 'data_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~data_base", 1042, G__DataFormatCint_589_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_589_0_7, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 1, 1, 1, 1, 0, "u 'data_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncevent(void) {
   /* event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_event));
   G__memfunc_setup("event",546,G__DataFormatCint_590_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_event), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_event",973,G__DataFormatCint_590_0_4, 121, -1, -1, 0, 8, 1, 1, 0, 
"h - 'UInt_t' 0 - eventID h - 'UInt_t' 0 - runID "
"h - 'UInt_t' 0 - subrunID g - 'Bool_t' 0 - isdata "
"d - 'Double_t' 0 - triggerT d - 'Double_t' 0 - beamT "
"d - 'Double_t' 0 - pot d - 'Double_t' 0 - etau", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eventID",687,G__DataFormatCint_590_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runID",482,G__DataFormatCint_590_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subrunID",812,G__DataFormatCint_590_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("triggerT",840,G__DataFormatCint_590_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beamT",489,G__DataFormatCint_590_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pot",339,G__DataFormatCint_590_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("etau",431,G__DataFormatCint_590_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isdata",630,G__DataFormatCint_590_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("event", 546, G__DataFormatCint_590_0_13, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_event), -1, 0, 1, 1, 1, 0, "u 'event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~event", 672, G__DataFormatCint_590_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_590_0_15, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_event), -1, 1, 1, 1, 1, 0, "u 'event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchit(void) {
   /* hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_hit));
   G__memfunc_setup("hit",325,G__DataFormatCint_591_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_hit), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::Hit' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' createa", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add_hit",717,G__DataFormatCint_591_0_4, 121, -1, -1, 0, 12, 1, 1, 0, 
"b - 'UChar_t' 0 - plane r - 'UShort_t' 0 - wire "
"r - 'UShort_t' 0 - channel d - 'Double_t' 0 - startT "
"d - 'Double_t' 0 - peakT d - 'Double_t' 0 - endT "
"d - 'Double_t' 0 - startT_sigma d - 'Double_t' 0 - peakT_sigma "
"d - 'Double_t' 0 - endT_sigma d - 'Double_t' 0 - charge "
"d - 'Double_t' 0 - charge_sigma r - 'UShort_t' 0 - trackID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_hits",871,G__DataFormatCint_591_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plane",528,G__DataFormatCint_591_0_6, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wire",439,G__DataFormatCint_591_0_7, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel",729,G__DataFormatCint_591_0_8, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startT",642,G__DataFormatCint_591_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("peakT",501,G__DataFormatCint_591_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endT",395,G__DataFormatCint_591_0_11, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__DataFormatCint_591_0_12, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startT_sigma",1266,G__DataFormatCint_591_0_13, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("peakT_sigma",1125,G__DataFormatCint_591_0_14, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endT_sigma",1019,G__DataFormatCint_591_0_15, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge_sigma",1242,G__DataFormatCint_591_0_16, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gof",316,G__DataFormatCint_591_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackID",674,G__DataFormatCint_591_0_18, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("hit", 325, G__DataFormatCint_591_0_19, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_hit), -1, 0, 1, 1, 1, 0, "u 'hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hit", 451, G__DataFormatCint_591_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_591_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_hit), -1, 1, 1, 1, 1, 0, "u 'hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunccluster(void) {
   /* cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_cluster));
   G__memfunc_setup("cluster",770,G__DataFormatCint_592_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_cluster), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::Cluster' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add_cluster",1162,G__DataFormatCint_592_0_4, 121, -1, -1, 0, 19, 1, 1, 0, 
"r - 'UShort_t' 0 - clusterID b - 'UChar_t' 0 - view "
"d - 'Double_t' 0 - charge d - 'Double_t' 0 - dtdw "
"d - 'Double_t' 0 - dtdw_sigma d - 'Double_t' 0 - dqdw "
"d - 'Double_t' 0 - dqdw_sigma f - 'Float_t' 0 - startx "
"f - 'Float_t' 0 - starty f - 'Float_t' 0 - startz "
"f - 'Float_t' 0 - startx_sigma f - 'Float_t' 0 - starty_sigma "
"f - 'Float_t' 0 - startz_sigma f - 'Float_t' 0 - endx "
"f - 'Float_t' 0 - endy f - 'Float_t' 0 - endz "
"f - 'Float_t' 0 - endx_sigma f - 'Float_t' 0 - endy_sigma "
"f - 'Float_t' 0 - endz_sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_clusters",1316,G__DataFormatCint_592_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clusterID",911,G__DataFormatCint_592_0_6, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("view",443,G__DataFormatCint_592_0_7, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__DataFormatCint_592_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dtdw",435,G__DataFormatCint_592_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dtdw_sigma",1059,G__DataFormatCint_592_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dqdw",432,G__DataFormatCint_592_0_11, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dqdw_sigma",1056,G__DataFormatCint_592_0_12, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startx",678,G__DataFormatCint_592_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("starty",679,G__DataFormatCint_592_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startz",680,G__DataFormatCint_592_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startx_sigma",1302,G__DataFormatCint_592_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("starty_sigma",1303,G__DataFormatCint_592_0_17, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startz_sigma",1304,G__DataFormatCint_592_0_18, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endx",431,G__DataFormatCint_592_0_19, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endy",432,G__DataFormatCint_592_0_20, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endz",433,G__DataFormatCint_592_0_21, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endx_sigma",1055,G__DataFormatCint_592_0_22, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endy_sigma",1056,G__DataFormatCint_592_0_23, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endz_sigma",1057,G__DataFormatCint_592_0_24, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("cluster", 770, G__DataFormatCint_592_0_25, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_cluster), -1, 0, 1, 1, 1, 0, "u 'cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~cluster", 896, G__DataFormatCint_592_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_592_0_27, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_cluster), -1, 1, 1, 1, 1, 0, "u 'cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsps(void) {
   /* sps */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_sps));
   G__memfunc_setup("sps",342,G__DataFormatCint_652_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_sps), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_sps",773,G__DataFormatCint_652_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spsID",483,G__DataFormatCint_652_0_5, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxx",474,G__DataFormatCint_652_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxy",475,G__DataFormatCint_652_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxz",476,G__DataFormatCint_652_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxx_sigma",1098,G__DataFormatCint_652_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxy_sigma",1099,G__DataFormatCint_652_0_10, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxz_sigma",1100,G__DataFormatCint_652_0_11, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2",358,G__DataFormatCint_652_0_12, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_spacepoint",1470,G__DataFormatCint_652_0_13, 121, -1, -1, 0, 8, 1, 1, 0, 
"r - 'UShort_t' 0 - spsID f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y f - 'Float_t' 0 - z "
"f - 'Float_t' 0 - ex f - 'Float_t' 0 - ey "
"f - 'Float_t' 0 - ez f - 'Float_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("sps", 342, G__DataFormatCint_652_0_14, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_sps), -1, 0, 1, 1, 1, 0, "u 'sps' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~sps", 468, G__DataFormatCint_652_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_652_0_16, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_sps), -1, 1, 1, 1, 1, 0, "u 'sps' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctrack(void) {
   /* track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_track));
   G__memfunc_setup("track",533,G__DataFormatCint_653_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_track), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::Track' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add_track",925,G__DataFormatCint_653_0_4, 121, -1, -1, 0, 13, 1, 1, 0, 
"r - 'UShort_t' 0 - trackID f - 'Float_t' 0 - startx "
"f - 'Float_t' 0 - starty f - 'Float_t' 0 - startz "
"f - 'Float_t' 0 - startd f - 'Float_t' 0 - endx "
"f - 'Float_t' 0 - endy f - 'Float_t' 0 - endz "
"f - 'Float_t' 0 - endd f - 'Float_t' 0 - theta "
"f - 'Float_t' 0 - phi d - 'Double_t' 0 - startmom "
"d - 'Double_t' 0 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_tracks",1079,G__DataFormatCint_653_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackID",674,G__DataFormatCint_653_0_6, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startx",678,G__DataFormatCint_653_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("starty",679,G__DataFormatCint_653_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startz",680,G__DataFormatCint_653_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startd",658,G__DataFormatCint_653_0_10, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endx",431,G__DataFormatCint_653_0_11, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endy",432,G__DataFormatCint_653_0_12, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endz",433,G__DataFormatCint_653_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endd",411,G__DataFormatCint_653_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__DataFormatCint_653_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__DataFormatCint_653_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("startmom",887,G__DataFormatCint_653_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("len",319,G__DataFormatCint_653_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_trajectory",1487,G__DataFormatCint_653_0_19, 121, -1, -1, 0, 8, 1, 1, 0, 
"r - 'UShort_t' 0 - vtxID f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y f - 'Float_t' 0 - z "
"f - 'Float_t' 0 - dirx f - 'Float_t' 0 - diry "
"f - 'Float_t' 0 - dirz d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_points",1100,G__DataFormatCint_653_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxID",495,G__DataFormatCint_653_0_21, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxx",474,G__DataFormatCint_653_0_22, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxy",475,G__DataFormatCint_653_0_23, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxz",476,G__DataFormatCint_653_0_24, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dirx",439,G__DataFormatCint_653_0_25, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diry",440,G__DataFormatCint_653_0_26, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dirz",441,G__DataFormatCint_653_0_27, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mom",329,G__DataFormatCint_653_0_28, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("track", 533, G__DataFormatCint_653_0_29, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_track), -1, 0, 1, 1, 1, 0, "u 'track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~track", 659, G__DataFormatCint_653_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_653_0_31, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_track), -1, 1, 1, 1, 1, 0, "u 'track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmctruth(void) {
   /* mctruth */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mctruth));
   G__memfunc_setup("mctruth",775,G__DataFormatCint_654_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_mctruth), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::MCTruth' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_part",870,G__DataFormatCint_654_0_4, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pdgid",520,G__DataFormatCint_654_0_5, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxx",474,G__DataFormatCint_654_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxy",475,G__DataFormatCint_654_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxz",476,G__DataFormatCint_654_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mom",329,G__DataFormatCint_654_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momx",449,G__DataFormatCint_654_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momy",450,G__DataFormatCint_654_0_11, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momz",451,G__DataFormatCint_654_0_12, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__DataFormatCint_654_0_13, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__DataFormatCint_654_0_14, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status_code",1182,G__DataFormatCint_654_0_15, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gen_trackID",1083,G__DataFormatCint_654_0_16, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("origin",648,G__DataFormatCint_654_0_17, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_daughter",1283,G__DataFormatCint_654_0_18, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mother",655,G__DataFormatCint_654_0_19, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_primary",1164,G__DataFormatCint_654_0_20, 121, -1, -1, 0, 15, 1, 1, 0, 
"i - 'Int_t' 0 - pdgid r - 'UShort_t' 0 - trackID "
"i - 'Int_t' 0 - status_code b - 'UChar_t' 0 - origin "
"i - 'Int_t' 0 - ndaughter i - 'Int_t' 0 - mother "
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z d - 'Double_t' 0 - mass "
"d - 'Double_t' 0 - en d - 'Double_t' 0 - mom "
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mctruth", 775, G__DataFormatCint_654_0_21, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_mctruth), -1, 0, 1, 1, 1, 0, "u 'mctruth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mctruth", 901, G__DataFormatCint_654_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_654_0_23, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_mctruth), -1, 1, 1, 1, 1, 0, "u 'mctruth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmcnu(void) {
   /* mcnu */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcnu));
   G__memfunc_setup("mcnu",435,G__DataFormatCint_655_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_mcnu), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 'DATA::MCNeutrino' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add_neutrino",1276,G__DataFormatCint_655_0_4, 121, -1, -1, 0, 21, 1, 1, 0, 
"i - 'Int_t' 0 - pdgid g - 'Bool_t' 0 - ccnc "
"b - 'UChar_t' 0 - mode d - 'Double_t' 0 - q2 "
"d - 'Double_t' 0 - hmass i - 'Int_t' 0 - hitnuc "
"f - 'Float_t' 0 - vtxx f - 'Float_t' 0 - vtxy "
"f - 'Float_t' 0 - vtxz d - 'Double_t' 0 - en "
"d - 'Double_t' 0 - momx d - 'Double_t' 0 - momy "
"d - 'Double_t' 0 - momz d - 'Double_t' 0 - en_lep "
"d - 'Double_t' 0 - momx_lep d - 'Double_t' 0 - momy_lep "
"d - 'Double_t' 0 - momz_lep i - 'Int_t' 0 - pdgid_parent "
"d - 'Double_t' 0 - momx_parent d - 'Double_t' 0 - momy_parent "
"d - 'Double_t' 0 - momz_parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_nu",658,G__DataFormatCint_655_0_5, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pdgid",520,G__DataFormatCint_655_0_6, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ccnc",407,G__DataFormatCint_655_0_7, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mode",421,G__DataFormatCint_655_0_8, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("q2",163,G__DataFormatCint_655_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hmass",540,G__DataFormatCint_655_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitnuc",651,G__DataFormatCint_655_0_11, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxx",474,G__DataFormatCint_655_0_12, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxy",475,G__DataFormatCint_655_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtxz",476,G__DataFormatCint_655_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__DataFormatCint_655_0_15, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momx",449,G__DataFormatCint_655_0_16, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momy",450,G__DataFormatCint_655_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momz",451,G__DataFormatCint_655_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E_lep",485,G__DataFormatCint_655_0_19, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momx_lep",865,G__DataFormatCint_655_0_20, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momy_lep",866,G__DataFormatCint_655_0_21, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momz_lep",867,G__DataFormatCint_655_0_22, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momx_parent",1194,G__DataFormatCint_655_0_23, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momy_parent",1195,G__DataFormatCint_655_0_24, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momz_parent",1196,G__DataFormatCint_655_0_25, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pdgid_parent",1265,G__DataFormatCint_655_0_26, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mcnu", 435, G__DataFormatCint_655_0_27, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_mcnu), -1, 0, 1, 1, 1, 0, "u 'mcnu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mcnu", 561, G__DataFormatCint_655_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_655_0_29, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_mcnu), -1, 1, 1, 1, 1, 0, "u 'mcnu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmcpart(void) {
   /* mcpart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_mcpart));
   G__memfunc_setup("mcpart",647,G__DataFormatCint_656_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_mcpart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("add_particle",1244,G__DataFormatCint_656_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"r - 'UShort_t' 0 - trackID i - 'Int_t' 0 - pdgid "
"i - 'Int_t' 0 - status_code", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_part_info",1389,G__DataFormatCint_656_0_5, 121, -1, -1, 0, 13, 1, 1, 0, 
"d - 'Double_t' 0 - mom d - 'Double_t' 0 - momx "
"d - 'Double_t' 0 - momy d - 'Double_t' 0 - momz "
"f - 'Float_t' 0 - startx f - 'Float_t' 0 - starty "
"f - 'Float_t' 0 - startz d - 'Double_t' 0 - startt "
"f - 'Float_t' 0 - endx f - 'Float_t' 0 - endy "
"f - 'Float_t' 0 - endz d - 'Double_t' 0 - endt "
"f - 'Float_t' 0 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_fv_part_info",1704,G__DataFormatCint_656_0_6, 121, -1, -1, 0, 13, 1, 1, 0, 
"d - 'Double_t' 0 - mom d - 'Double_t' 0 - momx "
"d - 'Double_t' 0 - momy d - 'Double_t' 0 - momz "
"f - 'Float_t' 0 - startx f - 'Float_t' 0 - starty "
"f - 'Float_t' 0 - startz d - 'Double_t' 0 - startt "
"f - 'Float_t' 0 - endx f - 'Float_t' 0 - endy "
"f - 'Float_t' 0 - endz d - 'Double_t' 0 - endt "
"f - 'Float_t' 0 - len", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mcpart", 647, G__DataFormatCint_656_0_7, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_mcpart), -1, 0, 1, 1, 1, 0, "u 'mcpart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mcpart", 773, G__DataFormatCint_656_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_656_0_9, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_mcpart), -1, 1, 1, 1, 1, 0, "u 'mcpart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpmtfifo(void) {
   /* pmtfifo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo));
   G__memfunc_setup("pmtfifo",757,G__DataFormatCint_658_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_address",1169,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t g - 'Bool_t' 0 'false' create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_pmtfifo",1188,G__DataFormatCint_658_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel",729,G__DataFormatCint_658_0_5, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("discID",560,G__DataFormatCint_658_0_6, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("frame",523,G__DataFormatCint_658_0_7, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sample",642,G__DataFormatCint_658_0_8, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("index",536,G__DataFormatCint_658_0_9, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatCint_658_0_10, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_adc",727,G__DataFormatCint_658_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("adc",296,G__DataFormatCint_658_0_12, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_pmtfifo",1149,G__DataFormatCint_658_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - channel b - 'UChar_t' 0 - disc "
"h - 'UInt_t' 0 - frame h - 'UInt_t' 0 - sample "
"u 'vector<unsigned short,allocator<unsigned short> >' 'vector<UShort_t>' 10 - wf", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pmtfifo", 757, G__DataFormatCint_658_0_14, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo), -1, 0, 1, 1, 1, 0, "u 'pmtfifo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pmtfifo", 883, G__DataFormatCint_658_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_658_0_16, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_pmtfifo), -1, 1, 1, 1, 1, 0, "u 'pmtfifo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncstorage_manager(void) {
   /* storage_manager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   G__memfunc_setup("storage_manager",1583,G__DataFormatCint_659_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 1, 1, 1, 0, "i 'storage_manager::MODE' - 0 'READ' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_data_to_read",1666,G__DataFormatCint_659_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'DATA::DATA_TYPE' - 0 - type g - - 0 'true' read", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_io_mode",1159,G__DataFormatCint_659_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i 'storage_manager::MODE' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_in_filename",1535,G__DataFormatCint_659_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_in_rootdir",1508,G__DataFormatCint_659_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_out_filename",1699,G__DataFormatCint_659_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("io_mode",732,G__DataFormatCint_659_0_7, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("input_filename",1488,G__DataFormatCint_659_0_8, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("output_filename",1617,G__DataFormatCint_659_0_9, 117, G__get_linked_tagnum(&G__DataFormatCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__DataFormatCint_659_0_10, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__DataFormatCint_659_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__DataFormatCint_659_0_12, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_open",749,G__DataFormatCint_659_0_13, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_ready_io",1159,G__DataFormatCint_659_0_14, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next_event",1088,G__DataFormatCint_659_0_15, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("go_to",536,G__DataFormatCint_659_0_16, 103, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__DataFormatCint_659_0_17, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_data",825,G__DataFormatCint_659_0_18, 85, G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 1, 1, 1, 0, "i 'DATA::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__DataFormatCint_659_0_19, 85, G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (storage_manager* (*)())(&storage_manager::get) ), 0);
   G__memfunc_setup("kill",428,G__DataFormatCint_659_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&storage_manager::kill) ), 0);
   G__memfunc_setup("get_entries",1177,G__DataFormatCint_659_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_index",951,G__DataFormatCint_659_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_entries_read",1684,G__DataFormatCint_659_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_entires_written",2053,G__DataFormatCint_659_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_tree",847,G__DataFormatCint_659_0_25, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TTree), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("create_data_ptr",1570,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'DATA::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delete_data_ptr",1569,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'DATA::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read_event",1053,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write_event",1196,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prepare_tree",1278,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("storage_manager", 1583, G__DataFormatCint_659_0_31, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 1, 1, 1, 0, "u 'storage_manager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~storage_manager", 1709, G__DataFormatCint_659_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_659_0_33, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 1, 1, 1, 1, 0, "u 'storage_manager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataFormatCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataFormatCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataFormatCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DataFormatCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_FrameworkBase = { "FrameworkBase" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_DATA = { "DATA" , 110 , -1 };
G__linked_taginfo G__DataFormatCintLN_DATAcLcLDATA_TYPE = { "DATA::DATA_TYPE" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_data_base = { "data_base" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_event = { "event" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_hit = { "hit" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_cluster = { "cluster" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_sps = { "sps" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_track = { "track" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_mctruth = { "mctruth" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_mcnu = { "mcnu" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_mcpart = { "mcpart" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_pmtfifo = { "pmtfifo" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_manager = { "storage_manager" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_managercLcLMODE = { "storage_manager::MODE" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_managercLcLSTATUS = { "storage_manager::STATUS" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataFormatCint() {
  G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_string.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DataFormatCintLN_TFile.tagnum = -1 ;
  G__DataFormatCintLN_TTree.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_TChain.tagnum = -1 ;
  G__DataFormatCintLN_FrameworkBase.tagnum = -1 ;
  G__DataFormatCintLN_DATA.tagnum = -1 ;
  G__DataFormatCintLN_DATAcLcLDATA_TYPE.tagnum = -1 ;
  G__DataFormatCintLN_data_base.tagnum = -1 ;
  G__DataFormatCintLN_event.tagnum = -1 ;
  G__DataFormatCintLN_hit.tagnum = -1 ;
  G__DataFormatCintLN_cluster.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__DataFormatCintLN_sps.tagnum = -1 ;
  G__DataFormatCintLN_track.tagnum = -1 ;
  G__DataFormatCintLN_mctruth.tagnum = -1 ;
  G__DataFormatCintLN_mcnu.tagnum = -1 ;
  G__DataFormatCintLN_mcpart.tagnum = -1 ;
  G__DataFormatCintLN_pmtfifo.tagnum = -1 ;
  G__DataFormatCintLN_storage_manager.tagnum = -1 ;
  G__DataFormatCintLN_storage_managercLcLMODE.tagnum = -1 ;
  G__DataFormatCintLN_storage_managercLcLSTATUS.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataFormatCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_string);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TFile);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TChain);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_FrameworkBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_DATA),0,-1,0,(char*)NULL,G__setup_memvarDATA,G__setup_memfuncDATA);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_DATAcLcLDATA_TYPE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_data_base),sizeof(data_base),-1,263424,(char*)NULL,G__setup_memvardata_base,G__setup_memfuncdata_base);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_event),sizeof(event),-1,263424,(char*)NULL,G__setup_memvarevent,G__setup_memfuncevent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_hit),sizeof(hit),-1,263424,(char*)NULL,G__setup_memvarhit,G__setup_memfunchit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_cluster),sizeof(cluster),-1,263424,(char*)NULL,G__setup_memvarcluster,G__setup_memfunccluster);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_sps),sizeof(sps),-1,263424,(char*)NULL,G__setup_memvarsps,G__setup_memfuncsps);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_track),sizeof(track),-1,263424,(char*)NULL,G__setup_memvartrack,G__setup_memfunctrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_mctruth),sizeof(mctruth),-1,263424,(char*)NULL,G__setup_memvarmctruth,G__setup_memfuncmctruth);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_mcnu),sizeof(mcnu),-1,263424,(char*)NULL,G__setup_memvarmcnu,G__setup_memfuncmcnu);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_mcpart),sizeof(mcpart),-1,263424,(char*)NULL,G__setup_memvarmcpart,G__setup_memfuncmcpart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_pmtfifo),sizeof(pmtfifo),-1,263424,(char*)NULL,G__setup_memvarpmtfifo,G__setup_memfuncpmtfifo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_manager),sizeof(storage_manager),-1,263424,(char*)NULL,G__setup_memvarstorage_manager,G__setup_memfuncstorage_manager);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_managercLcLMODE);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_managercLcLSTATUS);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDataFormatCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataFormatCint()");
  G__set_cpp_environmentDataFormatCint();
  G__cpp_setup_tagtableDataFormatCint();

  G__cpp_setup_inheritanceDataFormatCint();

  G__cpp_setup_typetableDataFormatCint();

  G__cpp_setup_memvarDataFormatCint();

  G__cpp_setup_memfuncDataFormatCint();
  G__cpp_setup_globalDataFormatCint();
  G__cpp_setup_funcDataFormatCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataFormatCint();
  return;
}
class G__cpp_setup_initDataFormatCint {
  public:
    G__cpp_setup_initDataFormatCint() { G__add_setup_func("DataFormatCint",(G__incsetup)(&G__cpp_setupDataFormatCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataFormatCint() { G__remove_setup_func("DataFormatCint"); }
};
G__cpp_setup_initDataFormatCint G__cpp_setup_initializerDataFormatCint;

