//
// File generated by rootcint at Tue Nov 12 23:56:51 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ProcessDBCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ProcessDBCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProcessDBI ProcessDBI;
      #else
      class ProcessDBI  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProcessDBI() throw() {};
         ::TSQLServer* _conn; ///< SQL connection instance
         ::DB::DB_t _type; ///< Type of SQL server
         unsigned short _ntrial; ///< Number of trial to establish a connection upon Reconnect() call
         string _server; ///< Connection server (host+port+db) info stored upon Connect() call
         string _user; ///< Connection user name stored upon Connect() call
         string _passwd; ///< Connection password stored upon Connect() call
         bool _download_res; ///< Store query result locally upon success 
         vector< ::TSQLStatement* > _res_v; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProcessDBIManager ProcessDBIManager;
      #else
      class ProcessDBIManager  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProcessDBIManager() throw() {};
         map< ::string, map< ::string, unsigned long, ::less< ::string >, allocator< pair< const ::string, unsigned long >  >  >  > _conn_key; //
         vector< ::ProcessDBI* > _conn_v; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TableBase TableBase;
      #else
      class TableBase  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TableBase() throw() {};
         string _db; ///< database name ... stored to return table name w/ databse
         string _tablename; ///< bare table name
         unsigned long _conn_key; ///< a connection key to retrieve ProcessDBI pointer through ProcessDBIManager::GetConnection function
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::QCTableBase QCTableBase;
      #else
      class QCTableBase  :  public ::TableBase {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~QCTableBase() throw() {};
         unsigned long _res_key; ///< A key to access query result
         ::TDatime _tstart; ///< validity range start time variable holder
         ::TDatime _tend; ///< validity range end time variable holder
         ::TDatime _tlog; ///< Log time stamp variable holder
         double _mean; ///< QC mean value holder
         double _sigma; ///< QC sigma value holder
         int _run; ///< run number holder
         int _subrun; ///< sub run number holder
         short _ch; ///< channel number holder
         ::TString _ref; ///< reference holder
         pair< ::TDatime, ::TDatime > _cut_time; //
         pair< Double_t, Double_t > _cut_mean; //
         pair< Double_t, Double_t > _cut_sigma; //
         pair< Int_t, Int_t > _cut_run; //
         pair< Int_t, Int_t > _cut_subrun; //
         pair< Short_t, Short_t > _cut_ch; //
         ::TString _cut_ref; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RunQCTable RunQCTable;
      #else
      class RunQCTable  :  public ::QCTableBase {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RunQCTable() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ChQCTable ChQCTable;
      #else
      class ChQCTable  :  public ::RunQCTable {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ChQCTable() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JobQueueTable JobQueueTable;
      #else
      class JobQueueTable  :  public ::TableBase {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~JobQueueTable() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TimeQCTable TimeQCTable;
      #else
      class TimeQCTable  :  public ::QCTableBase {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TimeQCTable() throw() {};
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace DB {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void DB_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("DB", 0 /*version*/, "MonConsts.h", 6,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &DB_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void DB_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ProcDB {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void ProcDB_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("ProcDB", 0 /*version*/, "MonConsts.h", 19,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &ProcDB_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void ProcDB_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace QCDB {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void QCDB_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("QCDB", 0 /*version*/, "MonConsts.h", 47,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &QCDB_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void QCDB_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void ProcessDBI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProcessDBI_Dictionary();
   static void *new_ProcessDBI(void *p = 0);
   static void *newArray_ProcessDBI(Long_t size, void *p);
   static void delete_ProcessDBI(void *p);
   static void deleteArray_ProcessDBI(void *p);
   static void destruct_ProcessDBI(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProcessDBI*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProcessDBI) == sizeof(::ROOT::Shadow::ProcessDBI));
      ::ProcessDBI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ProcessDBI),0);
      static ::ROOT::TGenericClassInfo 
         instance("ProcessDBI", "ProcessDBI.hh", 32,
                  typeid(::ProcessDBI), DefineBehavior(ptr, ptr),
                  &ProcessDBI_ShowMembers, &ProcessDBI_Dictionary, isa_proxy, 4,
                  sizeof(::ProcessDBI) );
      instance.SetNew(&new_ProcessDBI);
      instance.SetNewArray(&newArray_ProcessDBI);
      instance.SetDelete(&delete_ProcessDBI);
      instance.SetDeleteArray(&deleteArray_ProcessDBI);
      instance.SetDestructor(&destruct_ProcessDBI);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProcessDBI*)
   {
      return GenerateInitInstanceLocal((::ProcessDBI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProcessDBI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProcessDBI_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProcessDBI*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProcessDBIManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProcessDBIManager_Dictionary();

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProcessDBIManager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProcessDBIManager) == sizeof(::ROOT::Shadow::ProcessDBIManager));
      ::ProcessDBIManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ProcessDBIManager),0);
      static ::ROOT::TGenericClassInfo 
         instance("ProcessDBIManager", "./ProcessDBIManager.hh", 34,
                  typeid(::ProcessDBIManager), DefineBehavior(ptr, ptr),
                  &ProcessDBIManager_ShowMembers, &ProcessDBIManager_Dictionary, isa_proxy, 4,
                  sizeof(::ProcessDBIManager) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProcessDBIManager*)
   {
      return GenerateInitInstanceLocal((::ProcessDBIManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProcessDBIManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProcessDBIManager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProcessDBIManager*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TableBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TableBase_Dictionary();
   static void delete_TableBase(void *p);
   static void deleteArray_TableBase(void *p);
   static void destruct_TableBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TableBase*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TableBase) == sizeof(::ROOT::Shadow::TableBase));
      ::TableBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TableBase),0);
      static ::ROOT::TGenericClassInfo 
         instance("TableBase", "./TableBase.hh", 26,
                  typeid(::TableBase), DefineBehavior(ptr, ptr),
                  &TableBase_ShowMembers, &TableBase_Dictionary, isa_proxy, 4,
                  sizeof(::TableBase) );
      instance.SetDelete(&delete_TableBase);
      instance.SetDeleteArray(&deleteArray_TableBase);
      instance.SetDestructor(&destruct_TableBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TableBase*)
   {
      return GenerateInitInstanceLocal((::TableBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TableBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TableBase_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TableBase*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void QCTableBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void QCTableBase_Dictionary();
   static void delete_QCTableBase(void *p);
   static void deleteArray_QCTableBase(void *p);
   static void destruct_QCTableBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::QCTableBase*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::QCTableBase) == sizeof(::ROOT::Shadow::QCTableBase));
      ::QCTableBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::QCTableBase),0);
      static ::ROOT::TGenericClassInfo 
         instance("QCTableBase", "./QCTableBase.hh", 31,
                  typeid(::QCTableBase), DefineBehavior(ptr, ptr),
                  &QCTableBase_ShowMembers, &QCTableBase_Dictionary, isa_proxy, 4,
                  sizeof(::QCTableBase) );
      instance.SetDelete(&delete_QCTableBase);
      instance.SetDeleteArray(&deleteArray_QCTableBase);
      instance.SetDestructor(&destruct_QCTableBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::QCTableBase*)
   {
      return GenerateInitInstanceLocal((::QCTableBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::QCTableBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void QCTableBase_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::QCTableBase*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RunQCTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RunQCTable_Dictionary();
   static void *new_RunQCTable(void *p = 0);
   static void *newArray_RunQCTable(Long_t size, void *p);
   static void delete_RunQCTable(void *p);
   static void deleteArray_RunQCTable(void *p);
   static void destruct_RunQCTable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RunQCTable*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RunQCTable) == sizeof(::ROOT::Shadow::RunQCTable));
      ::RunQCTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RunQCTable),0);
      static ::ROOT::TGenericClassInfo 
         instance("RunQCTable", "./RunQCTable.hh", 24,
                  typeid(::RunQCTable), DefineBehavior(ptr, ptr),
                  &RunQCTable_ShowMembers, &RunQCTable_Dictionary, isa_proxy, 4,
                  sizeof(::RunQCTable) );
      instance.SetNew(&new_RunQCTable);
      instance.SetNewArray(&newArray_RunQCTable);
      instance.SetDelete(&delete_RunQCTable);
      instance.SetDeleteArray(&deleteArray_RunQCTable);
      instance.SetDestructor(&destruct_RunQCTable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RunQCTable*)
   {
      return GenerateInitInstanceLocal((::RunQCTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RunQCTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RunQCTable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RunQCTable*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ChQCTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ChQCTable_Dictionary();
   static void *new_ChQCTable(void *p = 0);
   static void *newArray_ChQCTable(Long_t size, void *p);
   static void delete_ChQCTable(void *p);
   static void deleteArray_ChQCTable(void *p);
   static void destruct_ChQCTable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ChQCTable*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ChQCTable) == sizeof(::ROOT::Shadow::ChQCTable));
      ::ChQCTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ChQCTable),0);
      static ::ROOT::TGenericClassInfo 
         instance("ChQCTable", "./ChQCTable.hh", 24,
                  typeid(::ChQCTable), DefineBehavior(ptr, ptr),
                  &ChQCTable_ShowMembers, &ChQCTable_Dictionary, isa_proxy, 4,
                  sizeof(::ChQCTable) );
      instance.SetNew(&new_ChQCTable);
      instance.SetNewArray(&newArray_ChQCTable);
      instance.SetDelete(&delete_ChQCTable);
      instance.SetDeleteArray(&deleteArray_ChQCTable);
      instance.SetDestructor(&destruct_ChQCTable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ChQCTable*)
   {
      return GenerateInitInstanceLocal((::ChQCTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ChQCTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ChQCTable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ChQCTable*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JobQueueTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JobQueueTable_Dictionary();
   static void *new_JobQueueTable(void *p = 0);
   static void *newArray_JobQueueTable(Long_t size, void *p);
   static void delete_JobQueueTable(void *p);
   static void deleteArray_JobQueueTable(void *p);
   static void destruct_JobQueueTable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JobQueueTable*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JobQueueTable) == sizeof(::ROOT::Shadow::JobQueueTable));
      ::JobQueueTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JobQueueTable),0);
      static ::ROOT::TGenericClassInfo 
         instance("JobQueueTable", "./JobQueueTable.hh", 6,
                  typeid(::JobQueueTable), DefineBehavior(ptr, ptr),
                  &JobQueueTable_ShowMembers, &JobQueueTable_Dictionary, isa_proxy, 4,
                  sizeof(::JobQueueTable) );
      instance.SetNew(&new_JobQueueTable);
      instance.SetNewArray(&newArray_JobQueueTable);
      instance.SetDelete(&delete_JobQueueTable);
      instance.SetDeleteArray(&deleteArray_JobQueueTable);
      instance.SetDestructor(&destruct_JobQueueTable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JobQueueTable*)
   {
      return GenerateInitInstanceLocal((::JobQueueTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JobQueueTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JobQueueTable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JobQueueTable*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TimeQCTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TimeQCTable_Dictionary();
   static void *new_TimeQCTable(void *p = 0);
   static void *newArray_TimeQCTable(Long_t size, void *p);
   static void delete_TimeQCTable(void *p);
   static void deleteArray_TimeQCTable(void *p);
   static void destruct_TimeQCTable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TimeQCTable*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TimeQCTable) == sizeof(::ROOT::Shadow::TimeQCTable));
      ::TimeQCTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TimeQCTable),0);
      static ::ROOT::TGenericClassInfo 
         instance("TimeQCTable", "./TimeQCTable.hh", 24,
                  typeid(::TimeQCTable), DefineBehavior(ptr, ptr),
                  &TimeQCTable_ShowMembers, &TimeQCTable_Dictionary, isa_proxy, 4,
                  sizeof(::TimeQCTable) );
      instance.SetNew(&new_TimeQCTable);
      instance.SetNewArray(&newArray_TimeQCTable);
      instance.SetDelete(&delete_TimeQCTable);
      instance.SetDeleteArray(&deleteArray_TimeQCTable);
      instance.SetDestructor(&destruct_TimeQCTable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TimeQCTable*)
   {
      return GenerateInitInstanceLocal((::TimeQCTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TimeQCTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TimeQCTable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TimeQCTable*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void ProcessDBI_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProcessDBI.
      typedef ::ROOT::Shadow::ProcessDBI ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProcessDBI*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_conn", &sobj->_conn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", &sobj->_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ntrial", &sobj->_ntrial);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_server", (void*)&sobj->_server);
      R__insp.InspectMember("string", (void*)&sobj->_server, "_server.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_user", (void*)&sobj->_user);
      R__insp.InspectMember("string", (void*)&sobj->_user, "_user.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_passwd", (void*)&sobj->_passwd);
      R__insp.InspectMember("string", (void*)&sobj->_passwd, "_passwd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_download_res", &sobj->_download_res);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_res_v", (void*)&sobj->_res_v);
      R__insp.InspectMember("vector<TSQLStatement*>", (void*)&sobj->_res_v, "_res_v.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProcessDBI(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ProcessDBI : new ::ProcessDBI;
   }
   static void *newArray_ProcessDBI(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ProcessDBI[nElements] : new ::ProcessDBI[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProcessDBI(void *p) {
      delete ((::ProcessDBI*)p);
   }
   static void deleteArray_ProcessDBI(void *p) {
      delete [] ((::ProcessDBI*)p);
   }
   static void destruct_ProcessDBI(void *p) {
      typedef ::ProcessDBI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ProcessDBI

//______________________________________________________________________________
namespace ROOT {
   void ProcessDBIManager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProcessDBIManager.
      typedef ::ROOT::Shadow::ProcessDBIManager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProcessDBIManager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_conn_key", (void*)&sobj->_conn_key);
      R__insp.InspectMember("map<std::string,std::map<std::string,size_t> >", (void*)&sobj->_conn_key, "_conn_key.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_conn_v", (void*)&sobj->_conn_v);
      R__insp.InspectMember("vector<ProcessDBI*>", (void*)&sobj->_conn_v, "_conn_v.", false);
   }

}

namespace ROOT {
} // end of namespace ROOT for class ::ProcessDBIManager

//______________________________________________________________________________
namespace ROOT {
   void TableBase_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TableBase.
      typedef ::ROOT::Shadow::TableBase ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TableBase*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_db", (void*)&sobj->_db);
      R__insp.InspectMember("string", (void*)&sobj->_db, "_db.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tablename", (void*)&sobj->_tablename);
      R__insp.InspectMember("string", (void*)&sobj->_tablename, "_tablename.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_conn_key", &sobj->_conn_key);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TableBase(void *p) {
      delete ((::TableBase*)p);
   }
   static void deleteArray_TableBase(void *p) {
      delete [] ((::TableBase*)p);
   }
   static void destruct_TableBase(void *p) {
      typedef ::TableBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TableBase

//______________________________________________________________________________
namespace ROOT {
   void JobQueueTable_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JobQueueTable.
      typedef ::ROOT::Shadow::JobQueueTable ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JobQueueTable*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("TableBase", ( ::TableBase * )( (::JobQueueTable*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JobQueueTable(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JobQueueTable : new ::JobQueueTable;
   }
   static void *newArray_JobQueueTable(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JobQueueTable[nElements] : new ::JobQueueTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_JobQueueTable(void *p) {
      delete ((::JobQueueTable*)p);
   }
   static void deleteArray_JobQueueTable(void *p) {
      delete [] ((::JobQueueTable*)p);
   }
   static void destruct_JobQueueTable(void *p) {
      typedef ::JobQueueTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JobQueueTable

//______________________________________________________________________________
namespace ROOT {
   void QCTableBase_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class QCTableBase.
      typedef ::ROOT::Shadow::QCTableBase ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::QCTableBase*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_res_key", &sobj->_res_key);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tstart", &sobj->_tstart);
      R__insp.InspectMember(sobj->_tstart, "_tstart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tend", &sobj->_tend);
      R__insp.InspectMember(sobj->_tend, "_tend.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tlog", &sobj->_tlog);
      R__insp.InspectMember(sobj->_tlog, "_tlog.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mean", &sobj->_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sigma", &sobj->_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_run", &sobj->_run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_subrun", &sobj->_subrun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ch", &sobj->_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ref", &sobj->_ref);
      R__insp.InspectMember(sobj->_ref, "_ref.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_time", (void*)&sobj->_cut_time);
      R__insp.InspectMember("pair<TDatime,TDatime>", (void*)&sobj->_cut_time, "_cut_time.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_mean", (void*)&sobj->_cut_mean);
      R__insp.InspectMember("pair<Double_t,Double_t>", (void*)&sobj->_cut_mean, "_cut_mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_sigma", (void*)&sobj->_cut_sigma);
      R__insp.InspectMember("pair<Double_t,Double_t>", (void*)&sobj->_cut_sigma, "_cut_sigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_run", (void*)&sobj->_cut_run);
      R__insp.InspectMember("pair<Int_t,Int_t>", (void*)&sobj->_cut_run, "_cut_run.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_subrun", (void*)&sobj->_cut_subrun);
      R__insp.InspectMember("pair<Int_t,Int_t>", (void*)&sobj->_cut_subrun, "_cut_subrun.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_ch", (void*)&sobj->_cut_ch);
      R__insp.InspectMember("pair<Short_t,Short_t>", (void*)&sobj->_cut_ch, "_cut_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cut_ref", &sobj->_cut_ref);
      R__insp.InspectMember(sobj->_cut_ref, "_cut_ref.");
      R__insp.GenericShowMembers("TableBase", ( ::TableBase * )( (::QCTableBase*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_QCTableBase(void *p) {
      delete ((::QCTableBase*)p);
   }
   static void deleteArray_QCTableBase(void *p) {
      delete [] ((::QCTableBase*)p);
   }
   static void destruct_QCTableBase(void *p) {
      typedef ::QCTableBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::QCTableBase

//______________________________________________________________________________
namespace ROOT {
   void RunQCTable_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RunQCTable.
      typedef ::ROOT::Shadow::RunQCTable ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::RunQCTable*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("QCTableBase", ( ::QCTableBase * )( (::RunQCTable*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RunQCTable(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RunQCTable : new ::RunQCTable;
   }
   static void *newArray_RunQCTable(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RunQCTable[nElements] : new ::RunQCTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_RunQCTable(void *p) {
      delete ((::RunQCTable*)p);
   }
   static void deleteArray_RunQCTable(void *p) {
      delete [] ((::RunQCTable*)p);
   }
   static void destruct_RunQCTable(void *p) {
      typedef ::RunQCTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RunQCTable

//______________________________________________________________________________
namespace ROOT {
   void TimeQCTable_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TimeQCTable.
      typedef ::ROOT::Shadow::TimeQCTable ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TimeQCTable*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("QCTableBase", ( ::QCTableBase * )( (::TimeQCTable*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TimeQCTable(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TimeQCTable : new ::TimeQCTable;
   }
   static void *newArray_TimeQCTable(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TimeQCTable[nElements] : new ::TimeQCTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_TimeQCTable(void *p) {
      delete ((::TimeQCTable*)p);
   }
   static void deleteArray_TimeQCTable(void *p) {
      delete [] ((::TimeQCTable*)p);
   }
   static void destruct_TimeQCTable(void *p) {
      typedef ::TimeQCTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TimeQCTable

//______________________________________________________________________________
namespace ROOT {
   void ChQCTable_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ChQCTable.
      typedef ::ROOT::Shadow::ChQCTable ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ChQCTable*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("RunQCTable", ( ::RunQCTable * )( (::ChQCTable*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ChQCTable(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChQCTable : new ::ChQCTable;
   }
   static void *newArray_ChQCTable(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChQCTable[nElements] : new ::ChQCTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_ChQCTable(void *p) {
      delete ((::ChQCTable*)p);
   }
   static void deleteArray_ChQCTable(void *p) {
      delete [] ((::ChQCTable*)p);
   }
   static void destruct_ChQCTable(void *p) {
      typedef ::ChQCTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ChQCTable

namespace ROOT {
   void maplEstringcOmaplEstringcOunsignedsPlonggRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOmaplEstringcOunsignedsPlonggRsPgR_Dictionary();
   static void *new_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p = 0);
   static void *newArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p);
   static void deleteArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p);
   static void destruct_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,map<string,unsigned long> >*)
   {
      map<string,map<string,unsigned long> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,map<string,unsigned long> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,map<string,unsigned long> >", -2, "prec_stl/map", 63,
                  typeid(map<string,map<string,unsigned long> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOmaplEstringcOunsignedsPlonggRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,map<string,unsigned long> >) );
      instance.SetNew(&new_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR);
      instance.SetDelete(&delete_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,map<string,unsigned long> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,map<string,unsigned long> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOmaplEstringcOunsignedsPlonggRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,map<string,unsigned long> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,map<string,unsigned long> > : new map<string,map<string,unsigned long> >;
   }
   static void *newArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,map<string,unsigned long> >[nElements] : new map<string,map<string,unsigned long> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p) {
      delete ((map<string,map<string,unsigned long> >*)p);
   }
   static void deleteArray_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p) {
      delete [] ((map<string,map<string,unsigned long> >*)p);
   }
   static void destruct_maplEstringcOmaplEstringcOunsignedsPlonggRsPgR(void *p) {
      typedef map<string,map<string,unsigned long> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,map<string,unsigned long> >

namespace ROOT {
   void maplEstringcOunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOunsignedsPlonggR_Dictionary();
   static void *new_maplEstringcOunsignedsPlonggR(void *p = 0);
   static void *newArray_maplEstringcOunsignedsPlonggR(Long_t size, void *p);
   static void delete_maplEstringcOunsignedsPlonggR(void *p);
   static void deleteArray_maplEstringcOunsignedsPlonggR(void *p);
   static void destruct_maplEstringcOunsignedsPlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,unsigned long>*)
   {
      map<string,unsigned long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,unsigned long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,unsigned long>", -2, "prec_stl/map", 63,
                  typeid(map<string,unsigned long>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOunsignedsPlonggR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,unsigned long>) );
      instance.SetNew(&new_maplEstringcOunsignedsPlonggR);
      instance.SetNewArray(&newArray_maplEstringcOunsignedsPlonggR);
      instance.SetDelete(&delete_maplEstringcOunsignedsPlonggR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOunsignedsPlonggR);
      instance.SetDestructor(&destruct_maplEstringcOunsignedsPlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,unsigned long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,unsigned long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOunsignedsPlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,unsigned long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOunsignedsPlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned long> : new map<string,unsigned long>;
   }
   static void *newArray_maplEstringcOunsignedsPlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned long>[nElements] : new map<string,unsigned long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOunsignedsPlonggR(void *p) {
      delete ((map<string,unsigned long>*)p);
   }
   static void deleteArray_maplEstringcOunsignedsPlonggR(void *p) {
      delete [] ((map<string,unsigned long>*)p);
   }
   static void destruct_maplEstringcOunsignedsPlonggR(void *p) {
      typedef map<string,unsigned long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,unsigned long>

namespace ROOT {
   void vectorlEProcessDBImUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEProcessDBImUgR_Dictionary();
   static void *new_vectorlEProcessDBImUgR(void *p = 0);
   static void *newArray_vectorlEProcessDBImUgR(Long_t size, void *p);
   static void delete_vectorlEProcessDBImUgR(void *p);
   static void deleteArray_vectorlEProcessDBImUgR(void *p);
   static void destruct_vectorlEProcessDBImUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ProcessDBI*>*)
   {
      vector<ProcessDBI*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ProcessDBI*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ProcessDBI*>", -2, "prec_stl/vector", 49,
                  typeid(vector<ProcessDBI*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEProcessDBImUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ProcessDBI*>) );
      instance.SetNew(&new_vectorlEProcessDBImUgR);
      instance.SetNewArray(&newArray_vectorlEProcessDBImUgR);
      instance.SetDelete(&delete_vectorlEProcessDBImUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEProcessDBImUgR);
      instance.SetDestructor(&destruct_vectorlEProcessDBImUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ProcessDBI*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ProcessDBI*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEProcessDBImUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ProcessDBI*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEProcessDBImUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ProcessDBI*> : new vector<ProcessDBI*>;
   }
   static void *newArray_vectorlEProcessDBImUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ProcessDBI*>[nElements] : new vector<ProcessDBI*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEProcessDBImUgR(void *p) {
      delete ((vector<ProcessDBI*>*)p);
   }
   static void deleteArray_vectorlEProcessDBImUgR(void *p) {
      delete [] ((vector<ProcessDBI*>*)p);
   }
   static void destruct_vectorlEProcessDBImUgR(void *p) {
      typedef vector<ProcessDBI*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ProcessDBI*>

namespace ROOT {
   void vectorlETSQLStatementmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETSQLStatementmUgR_Dictionary();
   static void *new_vectorlETSQLStatementmUgR(void *p = 0);
   static void *newArray_vectorlETSQLStatementmUgR(Long_t size, void *p);
   static void delete_vectorlETSQLStatementmUgR(void *p);
   static void deleteArray_vectorlETSQLStatementmUgR(void *p);
   static void destruct_vectorlETSQLStatementmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TSQLStatement*>*)
   {
      vector<TSQLStatement*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TSQLStatement*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TSQLStatement*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TSQLStatement*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETSQLStatementmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TSQLStatement*>) );
      instance.SetNew(&new_vectorlETSQLStatementmUgR);
      instance.SetNewArray(&newArray_vectorlETSQLStatementmUgR);
      instance.SetDelete(&delete_vectorlETSQLStatementmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETSQLStatementmUgR);
      instance.SetDestructor(&destruct_vectorlETSQLStatementmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TSQLStatement*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TSQLStatement*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETSQLStatementmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TSQLStatement*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETSQLStatementmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TSQLStatement*> : new vector<TSQLStatement*>;
   }
   static void *newArray_vectorlETSQLStatementmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TSQLStatement*>[nElements] : new vector<TSQLStatement*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETSQLStatementmUgR(void *p) {
      delete ((vector<TSQLStatement*>*)p);
   }
   static void deleteArray_vectorlETSQLStatementmUgR(void *p) {
      delete [] ((vector<TSQLStatement*>*)p);
   }
   static void destruct_vectorlETSQLStatementmUgR(void *p) {
      typedef vector<TSQLStatement*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TSQLStatement*>

/********************************************************
* ProcessDBCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableProcessDBCint();

extern "C" void G__set_cpp_environmentProcessDBCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ChQCTable.hh");
  G__add_compiledheader("JobQueueTable.hh");
  G__add_compiledheader("ProcessDBI.hh");
  G__add_compiledheader("ProcessDBIManager.hh");
  G__add_compiledheader("ProcessDB-TypeDef.hh");
  G__add_compiledheader("QCTableBase.hh");
  G__add_compiledheader("RunQCTable.hh");
  G__add_compiledheader("TableBase.hh");
  G__add_compiledheader("TimeQCTable.hh");
  G__cpp_reset_tagtableProcessDBCint();
}
#include <new>
extern "C" int G__cpp_dllrevProcessDBCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DB */

/* ProcDB */

/* QCDB */

/* ProcessDBI */
static int G__ProcessDBCint_475_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProcessDBI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProcessDBI[n];
     } else {
       p = new((void*) gvp) ProcessDBI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProcessDBI;
     } else {
       p = new((void*) gvp) ProcessDBI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ProcessDBI*) G__getstructoffset())->ServerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ProcessDBI*) G__getstructoffset())->StoreResult((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ProcessDBI*) G__getstructoffset())->StoreResult();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4])), *((string*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Reconnect());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProcessDBI*) G__getstructoffset())->ClearResult((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const ProcessDBI*) G__getstructoffset())->GetResCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProcessDBI*) G__getstructoffset())->Disconnect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ProcessDBI*) G__getstructoffset())->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((ProcessDBI*) G__getstructoffset())->Exec(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProcessDBI*) G__getstructoffset())->SetRetrialN((unsigned short) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((ProcessDBI*) G__getstructoffset())->Query(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ProcessDBI*) G__getstructoffset())->IsValidKey((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ProcessDBI*) G__getstructoffset())->IsValidResult((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ProcessDBI*) G__getstructoffset())->FetchRow((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ProcessDBI*) G__getstructoffset())->GetRow((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ProcessDBI*) G__getstructoffset())->GetRowCount((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ProcessDBI*) G__getstructoffset())->GetFieldCount((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const ProcessDBI*) G__getstructoffset())->GetServerName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_475_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const ProcessDBI*) G__getstructoffset())->GetUserName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_475_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProcessDBI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProcessDBI(*(ProcessDBI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProcessDBI G__TProcessDBI;
static int G__ProcessDBCint_475_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProcessDBI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProcessDBI*) (soff+(sizeof(ProcessDBI)*i)))->~G__TProcessDBI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProcessDBI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProcessDBI*) (soff))->~G__TProcessDBI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ProcessDBCint_475_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProcessDBI* dest = (ProcessDBI*) G__getstructoffset();
   *dest = *(ProcessDBI*) libp->para[0].ref;
   const ProcessDBI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProcessDBIManager */
static int G__ProcessDBCint_480_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProcessDBIManager::GetME());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_480_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ProcessDBIManager*) G__getstructoffset())->GetConnection((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_480_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 107, (long) ((ProcessDBIManager*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4])), *((string*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 107, (long) ((ProcessDBIManager*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 107, (long) ((ProcessDBIManager*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 107, (long) ((ProcessDBIManager*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((ProcessDBIManager*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_480_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProcessDBIManager*) G__getstructoffset())->Disconnect((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_480_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProcessDBIManager*) G__getstructoffset())->DisconnectAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_480_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProcessDBIManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProcessDBIManager(*(ProcessDBIManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ProcessDBCint_480_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProcessDBIManager* dest = (ProcessDBIManager*) G__getstructoffset();
   *dest = *(ProcessDBIManager*) libp->para[0].ref;
   const ProcessDBIManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TableBase */
static int G__ProcessDBCint_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TableBase*) G__getstructoffset())->CreateTable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TableBase*) G__getstructoffset())->DropTable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const string* pobj;
         const string xobj = ((const TableBase*) G__getstructoffset())->GetTableName((bool) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const string* pobj;
         const string xobj = ((const TableBase*) G__getstructoffset())->GetTableName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TableBase*) G__getstructoffset())->QueryAndDump(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const TableBase*) G__getstructoffset())->ExistTable(*((string*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const TableBase*) G__getstructoffset())->ExistTable());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4])), *((string*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, *((string*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->Connect((DB::DB_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TableBase*) G__getstructoffset())->SetConnKey((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TableBase*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_499_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TableBase*) G__getstructoffset())->GetTableDef((DB::DB_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TableBase G__TTableBase;
static int G__ProcessDBCint_499_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TableBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TableBase*) (soff+(sizeof(TableBase)*i)))->~G__TTableBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TableBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TableBase*) (soff))->~G__TTableBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ProcessDBCint_499_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TableBase* dest = (TableBase*) G__getstructoffset();
   *dest = *(TableBase*) libp->para[0].ref;
   const TableBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* QCTableBase */
static int G__ProcessDBCint_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->ClearValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->InitializeCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->ClearResult();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((QCTableBase*) G__getstructoffset())->Load((QCDB::MonKey_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((QCTableBase*) G__getstructoffset())->Load((QCDB::MonKey_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((QCTableBase*) G__getstructoffset())->Fetch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->SetRangeMean((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->SetRangeSigma((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((QCTableBase*) G__getstructoffset())->SetReference(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const QCTableBase*) G__getstructoffset())->Mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const QCTableBase*) G__getstructoffset())->Sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const QCTableBase*) G__getstructoffset())->Run());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const QCTableBase*) G__getstructoffset())->SubRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const QCTableBase*) G__getstructoffset())->Channel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TDatime& obj = ((const QCTableBase*) G__getstructoffset())->TimeStart();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TDatime& obj = ((const QCTableBase*) G__getstructoffset())->TimeEnd();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const QCTableBase*) G__getstructoffset())->Reference();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_500_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TDatime& obj = ((const QCTableBase*) G__getstructoffset())->LogTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef QCTableBase G__TQCTableBase;
static int G__ProcessDBCint_500_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (QCTableBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((QCTableBase*) (soff+(sizeof(QCTableBase)*i)))->~G__TQCTableBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (QCTableBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((QCTableBase*) (soff))->~G__TQCTableBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RunQCTable */
static int G__ProcessDBCint_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunQCTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunQCTable[n];
     } else {
       p = new((void*) gvp) RunQCTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunQCTable;
     } else {
       p = new((void*) gvp) RunQCTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RunQCTable*) G__getstructoffset())->Fill((QCDB::MonKey_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((string*) G__int(libp->para[5]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunQCTable*) G__getstructoffset())->SetRangeRun((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunQCTable*) G__getstructoffset())->SetRangeSubRun((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RunQCTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RunQCTable(*(RunQCTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RunQCTable G__TRunQCTable;
static int G__ProcessDBCint_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RunQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RunQCTable*) (soff+(sizeof(RunQCTable)*i)))->~G__TRunQCTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RunQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RunQCTable*) (soff))->~G__TRunQCTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ChQCTable */
static int G__ProcessDBCint_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChQCTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ChQCTable[n];
     } else {
       p = new((void*) gvp) ChQCTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ChQCTable;
     } else {
       p = new((void*) gvp) ChQCTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ChQCTable*) G__getstructoffset())->Fill(
(QCDB::MonKey_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *((string*) G__int(libp->para[6]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ChQCTable*) G__getstructoffset())->SetRangeChannel((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ChQCTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ChQCTable(*(ChQCTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ChQCTable G__TChQCTable;
static int G__ProcessDBCint_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ChQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ChQCTable*) (soff+(sizeof(ChQCTable)*i)))->~G__TChQCTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ChQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ChQCTable*) (soff))->~G__TChQCTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JobQueueTable */
static int G__ProcessDBCint_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JobQueueTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JobQueueTable[n];
     } else {
       p = new((void*) gvp) JobQueueTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JobQueueTable;
     } else {
       p = new((void*) gvp) JobQueueTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JobQueueTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JobQueueTable(*(JobQueueTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JobQueueTable G__TJobQueueTable;
static int G__ProcessDBCint_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JobQueueTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JobQueueTable*) (soff+(sizeof(JobQueueTable)*i)))->~G__TJobQueueTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JobQueueTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JobQueueTable*) (soff))->~G__TJobQueueTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ProcessDBCint_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JobQueueTable* dest = (JobQueueTable*) G__getstructoffset();
   *dest = *(JobQueueTable*) libp->para[0].ref;
   const JobQueueTable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TimeQCTable */
static int G__ProcessDBCint_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeQCTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeQCTable[n];
     } else {
       p = new((void*) gvp) TimeQCTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeQCTable;
     } else {
       p = new((void*) gvp) TimeQCTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TimeQCTable*) G__getstructoffset())->Fill((QCDB::MonKey_t) G__int(libp->para[0]), *((TDatime*) G__int(libp->para[1]))
, *((TDatime*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((string*) G__int(libp->para[5]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ProcessDBCint_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeQCTable*) G__getstructoffset())->SetRangeTime(*((TDatime*) G__int(libp->para[0])), *((TDatime*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ProcessDBCint_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TimeQCTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TimeQCTable(*(TimeQCTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TimeQCTable G__TTimeQCTable;
static int G__ProcessDBCint_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TimeQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TimeQCTable*) (soff+(sizeof(TimeQCTable)*i)))->~G__TTimeQCTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TimeQCTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TimeQCTable*) (soff))->~G__TTimeQCTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DB */

/* ProcDB */

/* QCDB */

/* ProcessDBI */

/* ProcessDBIManager */

/* TableBase */

/* QCTableBase */

/* RunQCTable */

/* ChQCTable */

/* JobQueueTable */

/* TimeQCTable */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncProcessDBCint {
 public:
  G__Sizep2memfuncProcessDBCint(): p(&G__Sizep2memfuncProcessDBCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncProcessDBCint::*p)();
};

size_t G__get_sizep2memfuncProcessDBCint()
{
  G__Sizep2memfuncProcessDBCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceProcessDBCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase))) {
     QCTableBase *G__Lderived;
     G__Lderived=(QCTableBase*)0x1000;
     {
       TableBase *G__Lpbase=(TableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase),G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable))) {
     RunQCTable *G__Lderived;
     G__Lderived=(RunQCTable*)0x1000;
     {
       QCTableBase *G__Lpbase=(QCTableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TableBase *G__Lpbase=(TableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable))) {
     ChQCTable *G__Lderived;
     G__Lderived=(ChQCTable*)0x1000;
     {
       RunQCTable *G__Lpbase=(RunQCTable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       QCTableBase *G__Lpbase=(QCTableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TableBase *G__Lpbase=(TableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable))) {
     JobQueueTable *G__Lderived;
     G__Lderived=(JobQueueTable*)0x1000;
     {
       TableBase *G__Lpbase=(TableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable),G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable))) {
     TimeQCTable *G__Lderived;
     G__Lderived=(TimeQCTable*)0x1000;
     {
       QCTableBase *G__Lpbase=(QCTableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TableBase *G__Lpbase=(TableBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable),G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableProcessDBCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TSQLStatement*>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,size_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,size_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned long>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned long,less<string> >",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::map<std::string,size_t> >",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::map<string,size_t> >",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,map<string,unsigned long,less<string>,allocator<pair<const string,unsigned long> > > >",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,map<string,unsigned long,less<string>,allocator<pair<const string,unsigned long> > >,less<string> >",117,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ProcessDBI*>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Int_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Short_t,Short_t>",117,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEshortcOshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DB */
static void G__setup_memvarDB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_DB));
   {
   G__memvar_setup((void*)(&DB::INVALID_KEY),114,0,1,-1,-1,-1,1,"INVALID_KEY=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_DBcLcLDB_t),-1,-2,1,G__FastAllocString(2048).Format("kMySQL=%lldLL",(long long)DB::kMySQL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_DBcLcLDB_t),-1,-2,1,G__FastAllocString(2048).Format("kPostgreSQL=%lldLL",(long long)DB::kPostgreSQL).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProcDB */
static void G__setup_memvarProcDB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDB));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kQueueID=%lldLL",(long long)ProcDB::kQueueID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kQueueName=%lldLL",(long long)ProcDB::kQueueName).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kUserName=%lldLL",(long long)ProcDB::kUserName).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kCMD=%lldLL",(long long)ProcDB::kCMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kStartTime=%lldLL",(long long)ProcDB::kStartTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kPeriod=%lldLL",(long long)ProcDB::kPeriod).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kIteration=%lldLL",(long long)ProcDB::kIteration).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kLogTime=%lldLL",(long long)ProcDB::kLogTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDBcLcLQField_t),-1,-2,1,G__FastAllocString(2048).Format("kQFieldMax=%lldLL",(long long)ProcDB::kQFieldMax).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&ProcDB::kQFieldName),117,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-5,1,"kQFieldName[8]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* QCDB */
static void G__setup_memvarQCDB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_QCDB));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLMonKey_t),-1,-2,1,G__FastAllocString(2048).Format("kTEST=%lldLL",(long long)QCDB::kTEST).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLMonKey_t),-1,-2,1,G__FastAllocString(2048).Format("kMonKeyMax=%lldLL",(long long)QCDB::kMonKeyMax).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kMonKey=%lldLL",(long long)QCDB::kMonKey).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kChannel=%lldLL",(long long)QCDB::kChannel).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kTimeBegin=%lldLL",(long long)QCDB::kTimeBegin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kTimeEnd=%lldLL",(long long)QCDB::kTimeEnd).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kRun=%lldLL",(long long)QCDB::kRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kSubRun=%lldLL",(long long)QCDB::kSubRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kMean=%lldLL",(long long)QCDB::kMean).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kSigma=%lldLL",(long long)QCDB::kSigma).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kReference=%lldLL",(long long)QCDB::kReference).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kLogTime=%lldLL",(long long)QCDB::kLogTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_QCDBcLcLQCField_t),-1,-2,1,G__FastAllocString(2048).Format("kQCFieldMax=%lldLL",(long long)QCDB::kQCFieldMax).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&QCDB::kQCFieldName),117,0,1,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-5,1,"kQCFieldName[10]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProcessDBI */
static void G__setup_memvarProcessDBI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI));
   { ProcessDBI *p; p=(ProcessDBI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TSQLServer),-1,-1,4,"_conn=",0,"/< SQL connection instance");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_DBcLcLDB_t),-1,-1,4,"_type=",0,"/< Type of SQL server");
   G__memvar_setup((void*)0,114,0,0,-1,-1,-1,4,"_ntrial=",0,"/< Number of trial to establish a connection upon Reconnect() call");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-1,4,"_server=",0,"/< Connection server (host+port+db) info stored upon Connect() call");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-1,4,"_user=",0,"/< Connection user name stored upon Connect() call");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-1,4,"_passwd=",0,"/< Connection password stored upon Connect() call");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_download_res=",0,"/< Store query result locally upon success ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR),G__defined_typename("vector<TSQLStatement*>"),-1,4,"_res_v=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProcessDBIManager */
static void G__setup_memvarProcessDBIManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager));
   { ProcessDBIManager *p; p=(ProcessDBIManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::map<std::string,size_t> >"),-1,4,"_conn_key=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR),G__defined_typename("vector<ProcessDBI*>"),-1,4,"_conn_v=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager),-1,-2,4,"_me=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TableBase */
static void G__setup_memvarTableBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase));
   { TableBase *p; p=(TableBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-1,2,"_db=",0,"/< database name ... stored to return table name w/ databse");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_string),-1,-1,2,"_tablename=",0,"/< bare table name");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_conn_key=",0,"/< a connection key to retrieve ProcessDBI pointer through ProcessDBIManager::GetConnection function");
   }
   G__tag_memvar_reset();
}


   /* QCTableBase */
static void G__setup_memvarQCTableBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase));
   { QCTableBase *p; p=(QCTableBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_res_key=",0,"/< A key to access query result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime),-1,-1,2,"_tstart=",0,"/< validity range start time variable holder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime),-1,-1,2,"_tend=",0,"/< validity range end time variable holder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime),-1,-1,2,"_tlog=",0,"/< Log time stamp variable holder");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_mean=",0,"/< QC mean value holder");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_sigma=",0,"/< QC sigma value holder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_run=",0,"/< run number holder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_subrun=",0,"/< sub run number holder");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"_ch=",0,"/< channel number holder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TString),-1,-1,2,"_ref=",0,"/< reference holder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlETDatimecOTDatimegR),-1,-1,2,"_cut_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEdoublecOdoublegR),G__defined_typename("pair<Double_t,Double_t>"),-1,2,"_cut_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEdoublecOdoublegR),G__defined_typename("pair<Double_t,Double_t>"),-1,2,"_cut_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEintcOintgR),G__defined_typename("pair<Int_t,Int_t>"),-1,2,"_cut_run=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEintcOintgR),G__defined_typename("pair<Int_t,Int_t>"),-1,2,"_cut_subrun=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_pairlEshortcOshortgR),G__defined_typename("pair<Short_t,Short_t>"),-1,2,"_cut_ch=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ProcessDBCintLN_TString),-1,-1,2,"_cut_ref=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RunQCTable */
static void G__setup_memvarRunQCTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable));
   { RunQCTable *p; p=(RunQCTable*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* ChQCTable */
static void G__setup_memvarChQCTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable));
   { ChQCTable *p; p=(ChQCTable*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* JobQueueTable */
static void G__setup_memvarJobQueueTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable));
   { JobQueueTable *p; p=(JobQueueTable*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TimeQCTable */
static void G__setup_memvarTimeQCTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable));
   { TimeQCTable *p; p=(TimeQCTable*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarProcessDBCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDB(void) {
   /* DB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_DB));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProcDB(void) {
   /* ProcDB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcDB));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncQCDB(void) {
   /* QCDB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_QCDB));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProcessDBI(void) {
   /* ProcessDBI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI));
   G__memfunc_setup("ProcessDBI",942,G__ProcessDBCint_475_0_1, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ServerType",1049,G__ProcessDBCint_475_0_2, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_DBcLcLDB_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreResult",1164,G__ProcessDBCint_475_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' store", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__ProcessDBCint_475_0_4, 103, -1, -1, 0, 6, 1, 1, 0, 
"i 'DB::DB_t' - 0 - type u 'string' - 0 - host "
"h - - 0 '0' port u 'string' - 0 '\"\"' db "
"u 'string' - 0 '\"\"' user u 'string' - 0 '\"\"' passwd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reconnect",929,G__ProcessDBCint_475_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearResult",1126,G__ProcessDBCint_475_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResCount",1107,G__ProcessDBCint_475_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__ProcessDBCint_475_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConnected",1103,G__ProcessDBCint_475_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,G__ProcessDBCint_475_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - cmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRetrialN",1101,G__ProcessDBCint_475_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "r - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__ProcessDBCint_475_0_12, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'string' - 0 - cmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValidKey",981,G__ProcessDBCint_475_0_13, 103, -1, -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValidResult",1323,G__ProcessDBCint_475_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FetchRow",802,G__ProcessDBCint_475_0_15, 85, G__get_linked_tagnum(&G__ProcessDBCintLN_TSQLStatement), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__ProcessDBCint_475_0_16, 85, G__get_linked_tagnum(&G__ProcessDBCintLN_TSQLStatement), -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRowCount",1121,G__ProcessDBCint_475_0_17, 105, -1, -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFieldCount",1293,G__ProcessDBCint_475_0_18, 105, -1, -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerName",1304,G__ProcessDBCint_475_0_19, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUserName",1088,G__ProcessDBCint_475_0_20, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ProcessDBI", 942, G__ProcessDBCint_475_0_21, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI), -1, 0, 1, 1, 1, 0, "u 'ProcessDBI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProcessDBI", 1068, G__ProcessDBCint_475_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ProcessDBCint_475_0_23, (int) ('u'), G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI), -1, 1, 1, 1, 1, 0, "u 'ProcessDBI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProcessDBIManager(void) {
   /* ProcessDBIManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager));
   G__memfunc_setup("GetME",434,G__ProcessDBCint_480_0_1, 85, G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ProcessDBIManager* (*)())(&ProcessDBIManager::GetME) ), 0);
   G__memfunc_setup("GetConnection",1328,G__ProcessDBCint_480_0_2, 85, G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI), -1, 0, 1, 1, 1, 8, "k - 'size_t' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__ProcessDBCint_480_0_3, 107, -1, G__defined_typename("size_t"), 0, 6, 1, 1, 0, 
"i 'DB::DB_t' - 0 - type u 'string' - 0 - host "
"h - - 0 '0' port u 'string' - 0 '\"\"' db "
"u 'string' - 0 '\"\"' user u 'string' - 0 '\"\"' passwd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__ProcessDBCint_480_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisconnectAll",1315,G__ProcessDBCint_480_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessDBIManager",1641,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ProcessDBIManager", 1641, G__ProcessDBCint_480_0_7, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager), -1, 0, 1, 1, 1, 0, "u 'ProcessDBIManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ProcessDBCint_480_0_8, (int) ('u'), G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBIManager), -1, 1, 1, 1, 1, 0, "u 'ProcessDBIManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTableBase(void) {
   /* TableBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase));
   G__memfunc_setup("CreateTable",1084,G__ProcessDBCint_499_0_2, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DropTable",893,G__ProcessDBCint_499_0_3, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableName",1161,G__ProcessDBCint_499_0_4, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 8, "g - - 0 'false' with_db", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("QueryAndDump",1215,G__ProcessDBCint_499_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - cmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExistTable",1013,G__ProcessDBCint_499_0_6, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__ProcessDBCint_499_0_7, 103, -1, -1, 0, 6, 1, 1, 0, 
"i 'DB::DB_t' - 0 - type u 'string' - 0 - host "
"h - - 0 '0' port u 'string' - 0 '\"\"' db "
"u 'string' - 0 '\"\"' user u 'string' - 0 '\"\"' passwd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConnKey",995,G__ProcessDBCint_499_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ProcessDBCint_499_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTableDef",1047,G__ProcessDBCint_499_0_10, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 9, "i 'DB::DB_t' - 0 - type", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetConnection",1328,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ProcessDBCintLN_ProcessDBI), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TableBase", 993, G__ProcessDBCint_499_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ProcessDBCint_499_0_13, (int) ('u'), G__get_linked_tagnum(&G__ProcessDBCintLN_TableBase), -1, 1, 1, 1, 1, 0, "u 'TableBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncQCTableBase(void) {
   /* QCTableBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_QCTableBase));
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearValues",1111,G__ProcessDBCint_500_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitializeCuts",1457,G__ProcessDBCint_500_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearResult",1126,G__ProcessDBCint_500_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Load",384,G__ProcessDBCint_500_0_6, 103, -1, -1, 0, 2, 1, 1, 0, 
"i 'QCDB::MonKey_t' - 0 - type k - 'size_t' 0 '0' limit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fetch",490,G__ProcessDBCint_500_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetRangeMean",1178,G__ProcessDBCint_500_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRangeSigma",1290,G__ProcessDBCint_500_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReference",1211,G__ProcessDBCint_500_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mean",385,G__ProcessDBCint_500_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sigma",497,G__ProcessDBCint_500_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,G__ProcessDBCint_500_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubRun",607,G__ProcessDBCint_500_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Channel",697,G__ProcessDBCint_500_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStart",925,G__ProcessDBCint_500_0_16, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeEnd",678,G__ProcessDBCint_500_0_17, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reference",911,G__ProcessDBCint_500_0_18, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogTime",689,G__ProcessDBCint_500_0_19, 117, G__get_linked_tagnum(&G__ProcessDBCintLN_TDatime), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~QCTableBase", 1141, G__ProcessDBCint_500_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRunQCTable(void) {
   /* RunQCTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable));
   G__memfunc_setup("RunQCTable",945,G__ProcessDBCint_503_0_1, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableDef",1047,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 9, "i 'DB::DB_t' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__ProcessDBCint_503_0_4, 103, -1, -1, 0, 6, 1, 1, 8, 
"i 'QCDB::MonKey_t' - 0 - type i - 'Int_t' 0 - run "
"i - 'Int_t' 0 - subrun d - 'Double_t' 0 - mean "
"d - 'Double_t' 0 - sigma u 'string' - 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fetch",490,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRangeRun",1102,G__ProcessDBCint_503_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - min i - 'Int_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRangeSubRun",1400,G__ProcessDBCint_503_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - min i - 'Int_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RunQCTable", 945, G__ProcessDBCint_503_0_8, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_RunQCTable), -1, 0, 1, 1, 1, 0, "u 'RunQCTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunQCTable", 1071, G__ProcessDBCint_503_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncChQCTable(void) {
   /* ChQCTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable));
   G__memfunc_setup("ChQCTable",807,G__ProcessDBCint_504_0_1, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableDef",1047,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 9, "i 'DB::DB_t' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__ProcessDBCint_504_0_4, 103, -1, -1, 0, 7, 1, 1, 8, 
"i 'QCDB::MonKey_t' - 0 - type i - 'Int_t' 0 - run "
"i - 'Int_t' 0 - subrun s - 'Short_t' 0 - ch "
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma "
"u 'string' - 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fetch",490,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRangeChannel",1490,G__ProcessDBCint_504_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - min s - 'Short_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ChQCTable", 807, G__ProcessDBCint_504_0_7, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_ChQCTable), -1, 0, 1, 1, 1, 0, "u 'ChQCTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ChQCTable", 933, G__ProcessDBCint_504_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJobQueueTable(void) {
   /* JobQueueTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable));
   G__memfunc_setup("JobQueueTable",1288,G__ProcessDBCint_505_0_1, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableDef",1047,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 9, "i 'DB::DB_t' - 0 - type", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("JobQueueTable", 1288, G__ProcessDBCint_505_0_3, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable), -1, 0, 1, 1, 1, 0, "u 'JobQueueTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JobQueueTable", 1414, G__ProcessDBCint_505_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ProcessDBCint_505_0_5, (int) ('u'), G__get_linked_tagnum(&G__ProcessDBCintLN_JobQueueTable), -1, 1, 1, 1, 1, 0, "u 'JobQueueTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTimeQCTable(void) {
   /* TimeQCTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable));
   G__memfunc_setup("TimeQCTable",1035,G__ProcessDBCint_506_0_1, 105, G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTableDef",1047,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__ProcessDBCintLN_string), -1, 0, 1, 1, 1, 9, "i 'DB::DB_t' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__ProcessDBCint_506_0_4, 103, -1, -1, 0, 6, 1, 1, 8, 
"i 'QCDB::MonKey_t' - 0 - type u 'TDatime' - 0 - tstart "
"u 'TDatime' - 0 - tend d - 'Double_t' 0 - mean "
"d - 'Double_t' 0 - sigma u 'string' - 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fetch",490,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRangeTime",1192,G__ProcessDBCint_506_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TDatime' - 0 - min u 'TDatime' - 0 - max", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TimeQCTable", 1035, G__ProcessDBCint_506_0_7, (int) ('i'), G__get_linked_tagnum(&G__ProcessDBCintLN_TimeQCTable), -1, 0, 1, 1, 1, 0, "u 'TimeQCTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TimeQCTable", 1161, G__ProcessDBCint_506_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncProcessDBCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalProcessDBCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcProcessDBCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ProcessDBCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G__ProcessDBCintLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_TSQLStatement = { "TSQLStatement" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_TSQLServer = { "TSQLServer" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_DB = { "DB" , 110 , -1 };
G__linked_taginfo G__ProcessDBCintLN_DBcLcLDB_t = { "DB::DB_t" , 101 , -1 };
G__linked_taginfo G__ProcessDBCintLN_ProcDB = { "ProcDB" , 110 , -1 };
G__linked_taginfo G__ProcessDBCintLN_ProcDBcLcLQField_t = { "ProcDB::QField_t" , 101 , -1 };
G__linked_taginfo G__ProcessDBCintLN_QCDB = { "QCDB" , 110 , -1 };
G__linked_taginfo G__ProcessDBCintLN_QCDBcLcLMonKey_t = { "QCDB::MonKey_t" , 101 , -1 };
G__linked_taginfo G__ProcessDBCintLN_QCDBcLcLQCField_t = { "QCDB::QCField_t" , 101 , -1 };
G__linked_taginfo G__ProcessDBCintLN_ProcessDBI = { "ProcessDBI" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR = { "vector<TSQLStatement*,allocator<TSQLStatement*> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_reverse_iteratorlEvectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TSQLStatement*,allocator<TSQLStatement*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_ProcessDBIManager = { "ProcessDBIManager" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR = { "map<string,unsigned long,less<string>,allocator<pair<const string,unsigned long> > >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR = { "map<string,map<string,unsigned long,less<string>,allocator<pair<const string,unsigned long> > >,less<string>,allocator<pair<const string,map<string,unsigned long,less<string>,allocator<pair<const string,unsigned long> > > > > >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR = { "vector<ProcessDBI*,allocator<ProcessDBI*> >" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_reverse_iteratorlEvectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ProcessDBI*,allocator<ProcessDBI*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_TableBase = { "TableBase" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_QCTableBase = { "QCTableBase" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_pairlETDatimecOTDatimegR = { "pair<TDatime,TDatime>" , 115 , -1 };
G__linked_taginfo G__ProcessDBCintLN_pairlEshortcOshortgR = { "pair<short,short>" , 115 , -1 };
G__linked_taginfo G__ProcessDBCintLN_RunQCTable = { "RunQCTable" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_ChQCTable = { "ChQCTable" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_JobQueueTable = { "JobQueueTable" , 99 , -1 };
G__linked_taginfo G__ProcessDBCintLN_TimeQCTable = { "TimeQCTable" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableProcessDBCint() {
  G__ProcessDBCintLN_TString.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_string.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ProcessDBCintLN_TDatime.tagnum = -1 ;
  G__ProcessDBCintLN_pairlEintcOintgR.tagnum = -1 ;
  G__ProcessDBCintLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ProcessDBCintLN_TSQLStatement.tagnum = -1 ;
  G__ProcessDBCintLN_TSQLServer.tagnum = -1 ;
  G__ProcessDBCintLN_DB.tagnum = -1 ;
  G__ProcessDBCintLN_DBcLcLDB_t.tagnum = -1 ;
  G__ProcessDBCintLN_ProcDB.tagnum = -1 ;
  G__ProcessDBCintLN_ProcDBcLcLQField_t.tagnum = -1 ;
  G__ProcessDBCintLN_QCDB.tagnum = -1 ;
  G__ProcessDBCintLN_QCDBcLcLMonKey_t.tagnum = -1 ;
  G__ProcessDBCintLN_QCDBcLcLQCField_t.tagnum = -1 ;
  G__ProcessDBCintLN_ProcessDBI.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_reverse_iteratorlEvectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ProcessDBCintLN_ProcessDBIManager.tagnum = -1 ;
  G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR.tagnum = -1 ;
  G__ProcessDBCintLN_reverse_iteratorlEvectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ProcessDBCintLN_TableBase.tagnum = -1 ;
  G__ProcessDBCintLN_QCTableBase.tagnum = -1 ;
  G__ProcessDBCintLN_pairlETDatimecOTDatimegR.tagnum = -1 ;
  G__ProcessDBCintLN_pairlEshortcOshortgR.tagnum = -1 ;
  G__ProcessDBCintLN_RunQCTable.tagnum = -1 ;
  G__ProcessDBCintLN_ChQCTable.tagnum = -1 ;
  G__ProcessDBCintLN_JobQueueTable.tagnum = -1 ;
  G__ProcessDBCintLN_TimeQCTable.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableProcessDBCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TString);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_string);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TDatime);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_pairlEintcOintgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TSQLStatement);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TSQLServer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_DB),0,-1,0,(char*)NULL,G__setup_memvarDB,G__setup_memfuncDB);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_DBcLcLDB_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_ProcDB),0,-1,0,(char*)NULL,G__setup_memvarProcDB,G__setup_memfuncProcDB);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_ProcDBcLcLQField_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_QCDB),0,-1,0,(char*)NULL,G__setup_memvarQCDB,G__setup_memfuncQCDB);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_QCDBcLcLMonKey_t);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_QCDBcLcLQCField_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_ProcessDBI),sizeof(ProcessDBI),-1,263424,(char*)NULL,G__setup_memvarProcessDBI,G__setup_memfuncProcessDBI);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_reverse_iteratorlEvectorlETSQLStatementmUcOallocatorlETSQLStatementmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_ProcessDBIManager),sizeof(ProcessDBIManager),-1,263424,(char*)NULL,G__setup_memvarProcessDBIManager,G__setup_memfuncProcessDBIManager);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_maplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_maplEstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcOunsignedsPlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPlonggRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_vectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_reverse_iteratorlEvectorlEProcessDBImUcOallocatorlEProcessDBImUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TableBase),sizeof(TableBase),-1,263425,(char*)NULL,G__setup_memvarTableBase,G__setup_memfuncTableBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_QCTableBase),sizeof(QCTableBase),-1,263426,(char*)NULL,G__setup_memvarQCTableBase,G__setup_memfuncQCTableBase);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_pairlETDatimecOTDatimegR);
   G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_pairlEshortcOshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_RunQCTable),sizeof(RunQCTable),-1,263424,(char*)NULL,G__setup_memvarRunQCTable,G__setup_memfuncRunQCTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_ChQCTable),sizeof(ChQCTable),-1,263424,(char*)NULL,G__setup_memvarChQCTable,G__setup_memfuncChQCTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_JobQueueTable),sizeof(JobQueueTable),-1,263424,(char*)NULL,G__setup_memvarJobQueueTable,G__setup_memfuncJobQueueTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ProcessDBCintLN_TimeQCTable),sizeof(TimeQCTable),-1,263424,(char*)NULL,G__setup_memvarTimeQCTable,G__setup_memfuncTimeQCTable);
}
extern "C" void G__cpp_setupProcessDBCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupProcessDBCint()");
  G__set_cpp_environmentProcessDBCint();
  G__cpp_setup_tagtableProcessDBCint();

  G__cpp_setup_inheritanceProcessDBCint();

  G__cpp_setup_typetableProcessDBCint();

  G__cpp_setup_memvarProcessDBCint();

  G__cpp_setup_memfuncProcessDBCint();
  G__cpp_setup_globalProcessDBCint();
  G__cpp_setup_funcProcessDBCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncProcessDBCint();
  return;
}
class G__cpp_setup_initProcessDBCint {
  public:
    G__cpp_setup_initProcessDBCint() { G__add_setup_func("ProcessDBCint",(G__incsetup)(&G__cpp_setupProcessDBCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initProcessDBCint() { G__remove_setup_func("ProcessDBCint"); }
};
G__cpp_setup_initProcessDBCint G__cpp_setup_initializerProcessDBCint;

