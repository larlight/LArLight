/**
 * \file MyModName_module.cc
 * \ingroup MyModName
 *
 * \brief Class definition file of MyModName
 * @author SHELL_USER_NAME
 *
*/

/** \addtogroup MyModName
@{*/

#ifndef MYMODNAME_H
#define MYMODNAME_H

// LArSoft includes
#include "Geometry/Geometry.h"

// Framework includes.
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "fhiclcpp/ParameterSet.h"
#include "art/Framework/Services/Registry/ActivityRegistry.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Registry/ServiceMacros.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Persistency/Common/Ptr.h"
#include "art/Persistency/Common/PtrVector.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

namespace mymodname {

  /**
     \class MyModName
     MyModName module ... documentation to be added by SHELL_USER_NAME
  */ 
 
  class MyModName : public art::EDAnalyzer{
  public:
 
    /// Default constructor
    MyModName(const fhicl::ParameterSet&);

    /// Default destructor
    virtual ~MyModName();

    /// Method to be called before the event loop
    void beginJob();

    /// Method to be called event-by-event
    void analyze (const art::Event&); 

  private:

  };

} 

#endif//  MYMODNAME_H

// MyModName.cc

namespace mymodname {
  DEFINE_ART_MODULE(MyModName);
}

namespace mymodname {

  //-----------------------------------------------------------------------
  // Constructor
  MyModName::MyModName(fhicl::ParameterSet const& pset)
  {
    
  }

  //-----------------------------------------------------------------------
  // Destructor
  MyModName::~MyModName(){};
   
  //-----------------------------------------------------------------------
  void MyModName::beginJob(){};
   

  //-----------------------------------------------------------------------
  void MyModName::analyze(const art::Event& evt) 
  {
    
  }
} // namespace mymodname

/** @} */ // end of doxygen group
